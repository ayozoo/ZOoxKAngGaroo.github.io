[{"title":"React入门之添加交互","date":"2023-11-01T15:21:22.000Z","path":"2023/11/01/ React-添加交互/","text":"React入门之添加交互界面上的控件对随着用户的输入而更新。例如点击按钮切换轮播图的展示。在React中，随着时间变化的数据称为状态（state）。可以向任何组件添加状态，按需去进行更新。 响应事件什么是响应事件React允许我们在JSX中添加时间处理程序。事件处理程序是我们自己定义的函数。比如我们界面交互时：点击、悬停、焦点聚焦等交互事件。 我们在自己的组件中可以定义我们自己的事件处理程序。做法是往我们的组件时间处理程序props指定特定应用的名称。 1234567891011121314151617181920212223242526272829303132333435// 定义button组件 通过props接收onclick事件// {children} 作为插槽接收function Button({ onClick, children }) { return ( &lt;button onClick={onClick}&gt; {children} &lt;/button&gt; );}// 定义Toolbar 通过props接收onPlayMovie、onUploadImage事件// 这里的\"Play Movie、 Upload Image\" 作为子组件插入function Toolbar({ onPlayMovie, onUploadImage }) { return ( &lt;div&gt; &lt;Button onClick={onPlayMovie}&gt; Play Movie &lt;/Button&gt; &lt;Button onClick={onUploadImage}&gt; Upload Image &lt;/Button&gt; &lt;/div&gt; );}// 导出最终组件// 这里的onPlayMovie、onUploadImage就是对应Toolbar组件接收的事件处理程序、最终传入Button的onClick事件中export default function App() { return ( &lt;Toolbar onPlayMovie={() =&gt; alert('Playing!')} onUploadImage={() =&gt; alert('Uploading!')} /&gt; );} 事件处理函数添加事件处理函数步骤： 首先定义一个函数组件 在函数组件中定义事件处理程序的函数，然后将其作为prop传入合适的JSX标签。 事件函数特点： 通常是在组件内部定义 名称handle开头，后面跟事件名称 事件处理函数可以在JSX中有俩种定义方式： 内联事件处理函数（函数体比较短使用较为方便） 简洁函数 这时候看个例子： 1234567891011121314151617181920212223export default function Button() { function handleClick() { alert('你点击了我！'); } return ( &lt;button onClick={handleClick}&gt; 点我 &lt;/button&gt; );}// 简洁箭头函数 &lt;button onClick={() =&gt; { alert('你点击了我！');}}&gt; // 内联写法&lt;button onClick={function handleClick() { alert('你点击了我！');}}&gt; 事件处理函数传递的陷阱在Vue中会出现事件绑定时，直接触发事件处理程序。在这里存在陷阱。 传递给事件处理函数的函数应直接传递，而非调用。看下面的例子： 传递一个函数（正确） 调用一个函数（错误） 这样看来其实，区别很微妙。 左侧示例中handleClick函数作为onClick的事件处理函数传递。这个是告诉React这个事件是当用户点击按钮时才会触发函数。 右侧示例中handleClick()中最后的()会在渲染过程中立即触发函数，即使没有任何点击。这是因为JSX{和}之间的Javascript会立即执行。 当传入内联函数时，会出现不同的陷阱。 传递一个函数（正确） 调用一个函数（错误） &lt;button onClick={() =&gt; alert(‘…’)}&gt; &lt;button onClick={alert(‘…’)}&gt; 右侧的写法，将会导致组件渲染时，每次都触发。 左侧就是创建了一个稍后调用的函数，而不是在每次渲染时执行其内部的代码。 综上，就是想要定义内联函数事件处理函数，要将其包装在匿名函数中。 在事件处理函数中读取props事件函数声明于组件内部，因此他们可以直接访问组件的props。 例如：事件处理函数就可以接收到message 123456789101112131415161718192021function AlertButton({ message, children }) { return ( &lt;button onClick={() =&gt; alert(message)}&gt; {children} &lt;/button&gt; );}export default function Toolbar() { return ( &lt;div&gt; &lt;AlertButton message=\"正在播放！\"&gt; 播放电影 &lt;/AlertButton&gt; &lt;AlertButton message=\"正在上传！\"&gt; 上传图片 &lt;/AlertButton&gt; &lt;/div&gt; );} 将事件处理函数作为props传递通常，我们会在父组件中定义子组件的事件处理函数。为此将组件从父组件接收的prop作为事件处理函数传递。 1234567891011121314151617181920212223242526272829303132333435363738394041// 定义一个接收事件处理函数的子组件 function Button({ onClick, children }) { return ( &lt;button onClick={onClick}&gt; {children} &lt;/button&gt; );}// 这里作为父组件// 定义一个内部事件处理函数// 作为props传递给button组件function PlayButton({ movieName }) { function handlePlayClick() { alert(`正在播放 ${movieName}！`); } return ( &lt;Button onClick={handlePlayClick}&gt; 播放 \"{movieName}\" &lt;/Button&gt; );}function UploadButton() { return ( &lt;Button onClick={() =&gt; alert('正在上传！')}&gt; 上传图片 &lt;/Button&gt; );}export default function Toolbar() { return ( &lt;div&gt; &lt;PlayButton movieName=\"魔女宅急便\" /&gt; &lt;UploadButton /&gt; &lt;/div&gt; );} 命名事件处理函数prop对于浏览器内置组件（&lt;button&gt; 和 &lt;div&gt;），仅支持浏览器事件名称，例如，onclick。但是当我们构建自己的组件时，可以任意命名事件处理函数的prop。 当组件支持多种交互时，可以根据不同的应用程序命名事件处理函数props。 1234567891011121314151617181920212223// 这里onClick接收的还是浏览器内置的&lt;button&gt;（小写）// 仍然需要使用 onClick prop，而自定义的 Button 组件接收到的 prop 名称还是可以定义。function Button({ onSmash, children }) { return ( &lt;button onClick={onSmash}&gt; {children} &lt;/button&gt; );}export default function App() { return ( &lt;div&gt; &lt;Button onSmash={() =&gt; alert('正在播放！')}&gt; 播放电影 &lt;/Button&gt; &lt;Button onSmash={() =&gt; alert('正在上传！')}&gt; 上传图片 &lt;/Button&gt; &lt;/div&gt; );} 事件传播事件处理函数还将捕获来自任何子组件的事件。通常，我们会说事件沿着树向上“冒泡”或者“传播”：他从事件发生的地方开始，然后沿着树向上传播。 在React中所有的事件都会传播，除了onScroll，它仅适用于附加到的JSX标签中。 例如： 1234567891011121314151617// 当你点击button时，先触发他自身的onClick// 在执行父级div的onClick// 但是如果只点击了父级的那么只会触发父级本身的onClickexport default function Toolbar() { return ( &lt;div className=\"Toolbar\" onClick={() =&gt; { alert('你点击了 toolbar ！'); }}&gt; &lt;button onClick={() =&gt; alert('正在播放！')}&gt; 播放电影 &lt;/button&gt; &lt;button onClick={() =&gt; alert('正在上传！')}&gt; 上传图片 &lt;/button&gt; &lt;/div&gt; );} 阻止传播事件处理函数接收一个**事件对象作为唯一的参数。一般通常被称为e,代表`event（事件）。这个可以使用此对象读取事件的有关信息。** 这个事件对象还允许阻止传播。例如： 当你点击按钮时： React 调用了传递给 &lt;button&gt; 的 onClick 处理函数。 定义在中的处理函数执行了如下操作： 调用 e.stopPropagation()，阻止事件进一步冒泡。 调用 onClick 函数，它是从 Toolbar 组件传递过来的 prop。 在 Toolbar 组件中定义的函数，显示按钮对应的 alert。 由于传播被阻止，父级 &lt;div&gt; 的 onClick 处理函数不会执行。 由于调用了 e.stopPropagation()，点击按钮现在将只显示一个 alert（来自 &lt;button&gt;），而并非两个（分别来自 &lt;button&gt; 和父级 toolbar &lt;div&gt;）。点击按钮与点击周围的 toolbar 不同，因此阻止传播对这个 UI 是有意义的。 12345678910111213141516171819202122232425function Button({ onClick, children }) { return ( &lt;button onClick={e =&gt; { e.stopPropagation(); onClick(); }}&gt; {children} &lt;/button&gt; );}export default function Toolbar() { return ( &lt;div className=\"Toolbar\" onClick={() =&gt; { alert('你点击了 toolbar ！'); }}&gt; &lt;Button onClick={() =&gt; alert('正在播放！')}&gt; 播放电影 &lt;/Button&gt; &lt;Button onClick={() =&gt; alert('正在上传！')}&gt; 上传图片 &lt;/Button&gt; &lt;/div&gt; );} 拓展： 少数情况下，你可能需要捕获子元素上的所有事件，即便它们阻止了传播。例如，你可能想对每次点击进行埋点记录，传播逻辑暂且不论。那么你可以通过在事件名称末尾添加 Capture 来实现这一点： onClickCapture捕获所有事件1234&lt;div onClickCapture={() =&gt; { /* 这会首先执行 */ }}&gt; &lt;button onClick={e =&gt; e.stopPropagation()} /&gt; &lt;button onClick={e =&gt; e.stopPropagation()} /&gt;&lt;/div&gt; 每个事件分三个阶段传播： 它向下传播，调用所有的 onClickCapture 处理函数。 它执行被点击元素的 onClick 处理函数。 它向上传播，调用所有的 onClick 处理函数。 捕获事件对于路由或数据分析之类的代码很有用，但你可能不会在应用程序代码中使用它们。 传递处理函数作为事件传播的代替方案看这一段代码 12345678910function Button({ onClick, children }) { return ( &lt;button onClick={e =&gt; { e.stopPropagation(); onClick(); }}&gt; {children} &lt;/button&gt; );} 此处的点击事件处理函数先执行了一段代码，然后调用了父组件传递的 onClick prop。 也可以在调用父元素onClick函数之前，添加其他代码。此模式是事件传播的另一种 替代方案 。它让子组件处理事件，同时也让父组件指定一些额外的行为。与事件传播不同，它并非自动。但使用这种模式的好处是你可以清楚地追踪因某个事件的触发而执行的整条代码链。 如果你依赖于事件传播，而且很难追踪哪些处理程序在执行，及其执行的原因，可以尝试这种方法。 阻止默认行为某些浏览器事件具有与事件相关联的默认行为。例如，点击 &lt;form&gt; 表单内部的按钮会触发表单提交事件，默认情况下将重新加载整个页面。 可以调用事件对象中的 e.preventDefault() 来阻止这种情况发生： 123456789101112export default function Signup() { return ( &lt;form onSubmit={e =&gt; { e.preventDefault(); alert('提交表单！'); }}&gt; &lt;input /&gt; &lt;button&gt;发送&lt;/button&gt; &lt;/form&gt; );} 不要混淆 e.stopPropagation() 和 e.preventDefault()。它们都很有用，但二者并不相关： e.stopPropagation() 阻止触发绑定在外层标签上的事件处理函数。 e.preventDefault() 阻止少数事件的默认浏览器行为。 事件函数可以包含副作用吗当然可以！事件处理函数是执行副作用的最佳位置。 与渲染函数不同，事件处理函数不需要是 纯函数，因此它是用来 更改 某些值的绝佳位置。例如，更改输入框的值以响应键入，或者更改列表以响应按钮的触发。但是，为了更改某些信息，你首先需要某种方式存储它。在 React 中，这是通过 state（组件的记忆） 来完成的。","tags":[]},{"title":"React入门之描述UI","date":"2023-10-31T15:50:22.000Z","path":"2023/10/31/ React-描述UI/","text":"ReactReact应用就是被组件的独立UI片段构建，React组件本质就是可以添加任意标签的JavaScript函数。 React组件的基本要素 基本的组件js文件存在要素：1、可以return出存在任意标签的JavaScript函数2、函数中需要存在return(xxx) html结构3、最终需要将渲染的组件export出去 1234567891011121314151617181920function Profile() { return ( &lt;img src=\"https://i.imgur.com/MK3eW3As.jpg\" alt=\"Katherine Johnson\" /&gt; );}export default function Gallery() { return ( &lt;section&gt; &lt;h1&gt;Amazing scientists&lt;/h1&gt; &lt;Profile /&gt; &lt;Profile /&gt; &lt;Profile /&gt; &lt;/section&gt; );} React 组件导入导出 组件导入导出语法 语法 导出语句 导入语句 默认 export default function Button() {} import Button from ‘./Button.js’; 具名 export function Button() {} import { Button } from ‘./Button.js’ 组件导入导出案例解释 Gallery.js 定义了Profile组件 该组件采用默认导出（export default function） app.js 使用默认导入，导入Gallery文件的组件Gallery 使用默认导出方式将app组件导出 1234567891011121314151617181920212223242526272829303132## app.jsimport Gallery from './Gallery.js';export default function App() { return ( &lt;Gallery /&gt; );}## Gallery.jsfunction Profile() { return ( &lt;img src=\"https://i.imgur.com/QIrZWGIs.jpg\" alt=\"Alan L. Hart\" /&gt; );}export default function Gallery() { return ( &lt;section&gt; &lt;h1&gt;了不起的科学家们&lt;/h1&gt; &lt;Profile /&gt; &lt;Profile /&gt; &lt;Profile /&gt; &lt;/section&gt; );} JSX书写标签语言什么是JSXJSX 是 JavaScript 语法扩展，可以让在 JavaScript 文件中书写类似 HTML 的标签。JSX 看起来和 HTML 很像，但它的语法更加严格并且可以动态展示信息。 为什么出现JSX随着Web交互性越来越强，逻辑开始决定页面的内容。也就是可以说JavaScript负责HTML内容。因此，在React中，渲染逻辑和标签存在同一个组件文件中。 使用JSX的优势例如将一个按钮的渲染逻辑和标签放在一起，可以确保他们在编辑的时候保持同步。反之，也可以说彼此无关的细节是隔离的。 JSX与HTML的区别每个 React 组件都是一个 JavaScript 函数，它会返回一些标签，React 会将这些标签渲染到浏览器上。React 组件使用一种被称为 JSX 的语法扩展来描述这些标签。JSX对于HTML来说，语法更加严格并且可以动态的展示信息。 JSX and React 是相互独立的东西。通常配合使用，也可以单独使用它们中的任意一个，JSX 是一种语法扩展，而 React 则是一个 JavaScript 的库。 HTML转换为JSX现在存在一个html标签 1234567891011&lt;h1&gt;海蒂·拉玛的待办事项&lt;/h1&gt;&lt;img src=\"https://i.imgur.com/yXOvdOSs.jpg\" alt=\"Hedy Lamarr\" class=\"photo\"&gt;&lt;ul&gt; &lt;li&gt;发明一种新式交通信号灯 &lt;li&gt;排练一个电影场景 &lt;li&gt;改进频谱技术&lt;/ul&gt; 此时需要将它转化为React组件，可以这么做，是的没错。 采用 *** &lt;&gt; 或者其他标签*** 包裹。 123456789101112131415export default function TodoList() { return ( &lt;&gt; &lt;h1&gt;海蒂·拉玛的待办事项&lt;/h1&gt; &lt;img src=\"https://i.imgur.com/yXOvdOSs.jpg\" alt=\"Hedy Lamarr\" className=\"photo\" /&gt; &lt;ul&gt; &lt;li&gt;发明一种新式交通信号灯&lt;/li&gt; &lt;li&gt;排练一个电影场景&lt;/li&gt; &lt;li&gt;改进频谱技术&lt;/li&gt; &lt;/ul&gt; &lt;/&gt; JSX语法规则 只能返回一个根元素 就是return（）中必须只有一个根元素 不想在标签中增加一个额外的 ，可以用 &lt;&gt; 和 &lt;/&gt; 元素来代替 标签必须闭合 使用驼峰式命名法给大部分属性命名！ JSX 最终会被转化为 JavaScript，而 JSX 中的属性也会变成 JavaScript 对象中的键值对。在组件中，经常会遇到需要用变量的方式读取这些属性的时候。但 JavaScript 对变量的命名有限制。例如，变量名称不能包含 - 符号或者像 class 这样的保留字。 JSX 虽然看起来很像 HTML，但在底层其实被转化为了 JavaScript 对象，你不能在一个函数中返回多个对象，除非用一个数组把他们包装起来。这就是为什么多个 JSX 标签必须要用一个父元素或者 Fragment 来包裹。 JSX中通过大括号使用javaScriptJSX可以在JavaScript中编写类似HTML的标签，保证渲染逻辑和内容绑定。在需要在标签中添加Js逻辑或者引用标签的动态属性的时候可以在JSX的大括号里面编写Js。 JSX使用引号字符串 当你想将字符串属性传递给JSX时，放在单引号或者双引号中 当你想动态传值时，可以使用{ 和 } 替代 “ 和 “ 123456789101112131415161718192021222324// 字符串export default function Avatar() { return ( &lt;img className=\"avatar\" src=\"https://i.imgur.com/7vQD0fPs.jpg\" alt=\"Gregorio Y. Zara\" /&gt; );}// 变量export default function Avatar() { const avatar = 'https://i.imgur.com/7vQD0fPs.jpg'; const description = 'Gregorio Y. Zara'; return ( &lt;img className=\"avatar\" src={avatar} alt={description} /&gt; );} 注意:当使用src={ } 这种写法会去读取花括号中js中这个变量的值。 标签插值 JSX中允许在标签中插入大括号{}中使用变量 JSX中允许在标签中插入大括号{}中使用函数表达式 1234567891011121314151617181920212223// 变量export default function TodoList() { const name = 'Gregorio Y. Zara'; return ( &lt;h1&gt;{name}'s To Do List&lt;/h1&gt; );}// 函数表达式const today = new Date();function formatDate(date) { return new Intl.DateTimeFormat( 'zh-CN', { weekday: 'long' } ).format(date);}export default function TodoList() { return ( &lt;h1&gt;To Do List for {formatDate(today)}&lt;/h1&gt; );} 大括号的使用场景主要场景是字符串、数字、变量、和js表达式。 用作JSX标签*内部的文本*：&lt;h1&gt;{name}'s To Do List&lt;/h1&gt; 标签***=*后面紧跟的属性**：src={avatar} 会读取 avatar 变量，但是！！！对于src=\"{avatar}\"只会传一个字符串{avatar} 双大括号的使用场景双大括号其实是{}传递对象的传递方式。 对象也用大括号表示，例如 { name: \"Hedy Lamarr\", inventions: 5 }。因此，为了能在 JSX 中传递，必须用另一对额外的大括号包裹对象：person={{ name: \"Hedy Lamarr\", inventions: 5 }}。 也可使用嵌套对象，在jsx大括号中使用。 注意：内联 style 属性 使用驼峰命名法编写。例如，HTML &lt;ul style=\"background-color: black\"&gt; 在你的组件里应该写成 &lt;ul style={{ backgroundColor: 'black' }}&gt;。 12345678910111213141516171819202122232425262728293031323334353637383940// 对象传递export default function TodoList() { return ( &lt;ul style={{ backgroundColor: 'black', color: 'pink' }}&gt; &lt;li&gt;Improve the videophone&lt;/li&gt; &lt;li&gt;Prepare aeronautics lectures&lt;/li&gt; &lt;li&gt;Work on the alcohol-fuelled engine&lt;/li&gt; &lt;/ul&gt; );}// 嵌套对象传递const person = { name: 'Gregorio Y. Zara', theme: { backgroundColor: 'black', color: 'pink' }};export default function TodoList() { return ( &lt;div style={person.theme}&gt; &lt;h1&gt;{person.name}'s Todos&lt;/h1&gt; &lt;img className=\"avatar\" src=\"https://i.imgur.com/7vQD0fPs.jpg\" alt=\"Gregorio Y. Zara\" /&gt; &lt;ul&gt; &lt;li&gt;Improve the videophone&lt;/li&gt; &lt;li&gt;Prepare aeronautics lectures&lt;/li&gt; &lt;li&gt;Work on the alcohol-fuelled engine&lt;/li&gt; &lt;/ul&gt; &lt;/div&gt; );} Props组件传递React组件使用Props互相通信。每个父组件都可以提供props给他的自组件传递信息。可以通过Props传递认识JavaScript值，包括对象、数组、和函数。 Props传递类似HTML预定义的属性。像组件传递的时候可以传递任意的props。传递的props可以通过不同的方式进行渲染。 123456789101112131415161718192021222324// 其中person就是props/* 其中的花括号也就是props传递对象而已*/// 1、传递export default function Profile() { return ( &lt;Avatar person={{ name: 'Lin Lanying', imageId: '1bX5QH6' }} size={100} /&gt; );}// 2、使用/读取/* 1.以下这种方式是采用解构，将person的props解构为单独的props传递 2.prop可以存在默认值，例如下面的prop size*/function Avatar({ person, size=100 }) { // 在这里 person 和 size 是可访问的} Props的使用，必须要关注你的父子组件。需要考虑好父组件需要向自组件传的props，而子组件需要考虑传递的props通过什么方式去进行渲染。事实上，**就可以总结出来,React函数组件就是接受一个参数，那就是Props对象。** Props使用妙计 prop可以指定默认值 如果渲染时不存在size的prop，那么size将被赋值100进行渲染 其实就是size的prop属性不存在或者值undefined时会生效 但是，如果传递size={null} 或 size={0}，默认值将 不 被使用。 123function Avatar({ person, size = 100 }) { // ...} 可以使用JSX展开语法传递Props 会存在需要传递pros很多，需要声明prop传递 1234567891011function Profile({ person, size, isSepia, thickBorder }) { return ( &lt;div className=\"card\"&gt; &lt;Avatar person={person} size={size} isSepia={isSepia} thickBorder={thickBorder} /&gt; &lt;/div&gt; ); 如果存在将所有的props传递给子组件可以采用简洁展开语法，这种写法，将父组件需要传递的props全部传递。如果滥用，那么建议拆分组件。 1234567function Profile(props) { return ( &lt;div className=\"card\"&gt; &lt;Avatar {...props} /&gt; &lt;/div&gt; );} 将JSX作为子组件传递 类似HTML标签嵌套，以下例子在父组件card中将children组件作为prop传递，类似vue插槽 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849// app.jsimport Avatar from './Avatar.js';function Card({ children }) { return ( &lt;div className=\"card\"&gt; {children} &lt;/div&gt; );}export default function Profile() { return ( &lt;Card&gt; &lt;Avatar size={100} person={{ name: 'Katsuko Saruhashi', imageId: 'YfeOqp2' }} /&gt; &lt;/Card&gt; );}// Avatar.jsimport { getImageUrl } from './utils.js';export default function Avatar({ person, size }) { return ( &lt;img className=\"avatar\" src={getImageUrl(person)} alt={person.name} width={size} height={size} /&gt; );}// utils.jsexport function getImageUrl(person, size = 's') { return ( 'https://i.imgur.com/' + person.imageId + size + '.jpg' );} 注意一个组件可能会随着时间的推移收到不同的 props。 Props 并不总是静态的！Props 反映了组件在任何时间点的数据，并不仅仅是在开始时。 然而，props 是 不可变的（一个计算机科学术语，意思是“不可改变”）。当一个组件需要改变它的 props（例如，响应用户交互或新数据）时，它不得不“请求”它的父组件传递 不同的 props —— 一个新对象！它的旧 props 将被丢弃，最终 JavaScript 引擎将回收它们占用的内存。不要尝试“更改 props”。 条件渲染组件中会存在很多根据条件渲染的内容。在React中可以使用js中的if 语句、&amp;&amp; 和 ? : 运算符来选择性地渲染 JSX。 如何根据条件返回JSX根据组件Prop传入的属性值来动态展示内容 使用 if/else 语句 去判断 12345678910111213141516171819202122232425262728293031// 其中isPacked是组件接受的Prop// 用来动态显示 不同li内容的展示// 可以选择 return 的组件为null 那么他将不会显示任何内容function Item({ name, isPacked }) { if (isPacked) { return &lt;li className=\"item\"&gt;{name} ✔&lt;/li&gt;; } return &lt;li className=\"item\"&gt;{name}&lt;/li&gt;;}export default function PackingList() { return ( &lt;section&gt; &lt;h1&gt;Sally Ride 的行李清单&lt;/h1&gt; &lt;ul&gt; &lt;Item isPacked={true} name=\"宇航服\" /&gt; &lt;Item isPacked={true} name=\"带金箔的头盔\" /&gt; &lt;Item isPacked={false} name=\"Tam 的照片\" /&gt; &lt;/ul&gt; &lt;/section&gt; );} 选择性包含JSX 一般的不同条件会return不同的HTML片段，此刻可以选择包含JSX的书写，一般使用以下运算符： 1、三目运算符（? :）123456789101112if (isPacked) { return &lt;li className=\"item\"&gt;{name} ✔&lt;/li&gt;;}return &lt;li className=\"item\"&gt;{name}&lt;/li&gt;;// 以上代码使用三目运算符修改为return ( &lt;li className=\"item\"&gt; {isPacked ? name + ' ✔' : name} &lt;/li&gt;); **注意：**简单的内容展示适合使用三目这种运算符来展示，如果展示的逻辑较为复杂，可选择提取自组件来渲染。 2、与运算符（&amp;&amp;）1234567// 当 JavaScript &amp;&amp; 表达式 的左侧（我们的条件）为 true 时，它则返回其右侧的值（在我们的例子里是勾选符号）。但条件的结果是 false，则整个表达式会变成 false。在 JSX 里，React 会将 false 视为一个“空值”，就像 null 或者 undefined，这样 React 就不会在这里进行任何渲染return ( &lt;li className=\"item\"&gt; {name} {isPacked &amp;&amp; '✔'} &lt;/li&gt;); 注意：切勿将数字放在 &amp;&amp; 左侧. JavaScript 会自动将左侧的值转换成布尔类型以判断条件成立与否。然而，如果左侧是 0，整个表达式将变成左侧的值（0），React 此时则会渲染 0 而不是不进行渲染。 例如，一个常见的错误是 messageCount &amp;&amp; &lt;p&gt;New messages&lt;/p&gt;。其原本是想当 messageCount 为 0 的时候不进行渲染，但实际上却渲染了 0。 为了更正，可以将左侧的值改成布尔类型：messageCount &gt; 0 &amp;&amp; &lt;p&gt;New messages&lt;/p&gt;。 选择性赋值JSX 1、可以选择将需要渲染的JSX表达式文本赋值给变量123456789101112131415161718192021222324252627282930313233343536// 其中 渲染的JSX文本 itemContent赋值变量function Item({ name, isPacked }) { let itemContent = name; if (isPacked) { itemContent = name + \" ✔\"; } return ( &lt;li className=\"item\"&gt; {itemContent} &lt;/li&gt; );}export default function PackingList() { return ( &lt;section&gt; &lt;h1&gt;Sally Ride 的行李清单&lt;/h1&gt; &lt;ul&gt; &lt;Item isPacked={true} name=\"宇航服\" /&gt; &lt;Item isPacked={true} name=\"带金箔的头盔\" /&gt; &lt;Item isPacked={false} name=\"Tam 的照片\" /&gt; &lt;/ul&gt; &lt;/section&gt; );} 2、对于任意的JSX也是适用的123456789101112131415161718192021222324252627282930313233343536373839// 对于JSX itemContent 提取为变量 在return时便可直接使用变量 迭代修改时容易扩展function Item({ name, isPacked }) { let itemContent = name; if (isPacked) { itemContent = ( &lt;del&gt; {name + \" ✔\"} &lt;/del&gt; ); } return ( &lt;li className=\"item\"&gt; {itemContent} &lt;/li&gt; );}export default function PackingList() { return ( &lt;section&gt; &lt;h1&gt;Sally Ride 的行李清单&lt;/h1&gt; &lt;ul&gt; &lt;Item isPacked={true} name=\"宇航服\" /&gt; &lt;Item isPacked={true} name=\"带金箔的头盔\" /&gt; &lt;Item isPacked={false} name=\"Tam 的照片\" /&gt; &lt;/ul&gt; &lt;/section&gt; );} 渲染列表一般来说，我们经常通过JavaScript数组方法来操作数组中的数据，从而将数组中的数据渲染为多个类似的组件。 遍历渲染123456789101112131415161718192021222324252627282930// 首先我们拥有一个数组数据。const people = [ '凯瑟琳·约翰逊: 数学家', '马里奥·莫利纳: 化学家', '穆罕默德·阿卜杜勒·萨拉姆: 物理学家', '珀西·莱温·朱利亚: 化学家', '苏布拉马尼扬·钱德拉塞卡: 天体物理学家',];// 我们可以使用数组的遍历方法map这个数组来遍历元素const listItem = people.map(person=&gt;&lt;li&gt;{person}&lt;/li&gt;) // 用ul将listItem包围return &lt;ul&gt;{listItem}&lt;/ul&gt;// 最终代码const people = [ '凯瑟琳·约翰逊: 数学家', '马里奥·莫利纳: 化学家', '穆罕默德·阿卜杜勒·萨拉姆: 物理学家', '珀西·莱温·朱利亚: 化学家', '苏布拉马尼扬·钱德拉塞卡: 天体物理学家',];export default function List() { const listItems = people.map(person =&gt; &lt;li&gt;{person}&lt;/li&gt; ); return &lt;ul&gt;{listItems}&lt;/ul&gt;;} 注意：这样会导致没有唯一key报错。 过滤渲染我们有个需求需要将职业为化学家的元素渲染出来 12345678910111213141516171819202122232425262728293031323334353637383940// 数组const people = [ { id: 0, name: '凯瑟琳·约翰逊', profession: '数学家', }, { id: 1, name: '马里奥·莫利纳', profession: '化学家', }, { id: 2, name: '穆罕默德·阿卜杜勒·萨拉姆', profession: '物理学家', }, { name: '珀西·莱温·朱利亚', profession: '化学家', }, { name: '苏布拉马尼扬·钱德拉塞卡', profession: '天体物理学家', },];// 采用数组filter方法进行过滤const liItem = people.filter(person=&gt;person.profession==='化学家')// 用ul将liIte包围return &lt;ul&gt;{liItem}&lt;/ul&gt;// 完整代码export default function List() { const listItems = people.map(person =&gt; &lt;li&gt;{person}&lt;/li&gt; ); return &lt;ul&gt;{listItems}&lt;/ul&gt;;} 用key能保证渲染顺序直接放在 map() 方法里的 JSX 元素一般都需要指定 key 值！ 这些key会告诉React，每个组件对应的数组数据那一项，去进行匹配。 这些将在数组项进行移动、插入或者删除等操作是非常重要的。合适的key将保证React正常的更新DMO树。 key值在渲染之前，要存在数据里面key必须存在。 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869// app.jsimport { people } from './data.js';import { getImageUrl } from './utils.js';export default function List() { const listItems = people.map(person =&gt; &lt;li key={person.id}&gt; &lt;img src={getImageUrl(person)} alt={person.name} /&gt; &lt;p&gt; &lt;b&gt;{person.name}&lt;/b&gt; {' ' + person.profession + ' '} 因{person.accomplishment}而闻名世界 &lt;/p&gt; &lt;/li&gt; ); return &lt;ul&gt;{listItems}&lt;/ul&gt;;}// data.jsexport const people = [ { id: 0, // 在 JSX 中作为 key 使用 name: '凯瑟琳·约翰逊', profession: '数学家', accomplishment: '太空飞行相关数值的核算', imageId: 'MK3eW3A', }, { id: 1, // 在 JSX 中作为 key 使用 name: '马里奥·莫利纳', profession: '化学家', accomplishment: '北极臭氧空洞的发现', imageId: 'mynHUSa', }, { id: 2, // 在 JSX 中作为 key 使用 name: '穆罕默德·阿卜杜勒·萨拉姆', profession: '物理学家', accomplishment: '关于基本粒子间弱相互作用和电磁相互作用的统一理论', imageId: 'bE7W1ji', }, { id: 3, // 在 JSX 中作为 key 使用 name: '珀西·莱温·朱利亚', profession: '化学家', accomplishment: '开创性的可的松药物、类固醇和避孕药', imageId: 'IOjWm71', }, { id: 4, // 在 JSX 中作为 key 使用 name: '苏布拉马尼扬·钱德拉塞卡', profession: '天体物理学家', accomplishment: '白矮星质量计算', imageId: 'lrWQx8l', },];// util.jsexport function getImageUrl(person) { return ( 'https://i.imgur.com/' + person.imageId + 's.jpg' );} 如何在列表项显示多个DOM节点？？ 我需要将每个列表多渲染其他DOM节点。使用Fragment的语法简写&lt;&gt;&lt;/&gt;无法接受key值。写法存在要不使用包裹，或者使用明确的&lt;Fragment&gt;。 Fragment标签不会出现在DOM上，代码会转成最终的&lt;h1&gt;、&lt;p&gt;、&lt;h1&gt;、&lt;p&gt;…… 的列表。 12345678910import { Fragment } from 'react';// ...const listItems = people.map(person =&gt; &lt;Fragment key={person.id}&gt; &lt;h1&gt;{person.name}&lt;/h1&gt; &lt;p&gt;{person.bio}&lt;/p&gt; &lt;/Fragment&gt;); 如何设置key不同来源数据对应不同的key值获取方式： 来自数据库的数据：数据存在唯一的主键，可以直接使用。 本地产生的数据：可以使用自增计数器或者uuid的库生成唯一的key。 key值需要满足的条件 key在兄弟节点必须是唯一的。不需要全局唯一，不同数组可以使用相同的key。 key值不可改变。一定不可以在渲染时候的动态生成key。 为什么需要key？？React的key作用，其实都是可以从众多兄弟元素中能够标识出某一项（JSX节点）。这个提供的key提供的信息不止是这个元素所在的位置。即使元素的位置在渲染工程中发现了改变，它对应的key能够让React在整个生命周期一直可以使用。 注意： 不可以直接使用数组的索引作为key值来使用。如果没有显式指定key，React会默认讲索引作为key。当数组项的顺序在插入、删除或者重新排序等操作中发生改变。此时会出现一些难以排查的bug。 不要使用随机数去动态生成key，这样会导致每次渲染key不一样，React这样会认为你在频繁修改DOM，将会导致所有的组件和DOM元素重新渲染。会导致渲染问题，还会导致用户输入丢失。一定要保证key值的稳定性。 组件不会将key当作props的一部分。key值只会对React起到提示作用。 保持组件纯粹纯函数纯函数具有以下特征： 只负责自己的任务。他不会更改在该函数调用前就已经存在的对象和变量。 输入相同，则输出相同。给定相同的输入，纯函数总是返回相同的结果。 React围绕纯函数的概念进行设计。React假设你编写的所有组件都是纯函数。也就是说对于相同的输入，你所编写的React组件将会总是返回相同的JSX。 就像数学公式一样。你传入的值相同，你将会永远得到相同的结果。 再比如，可以将组件比作食谱。如果你遵循正常的菜谱（也就是相同的规律或者规则），在烹饪过程中不引进新食材，那么每次得到的菜肴都是相同的。这个菜肴就是React组件渲染返回的JSX。 副作用：（不符合）预期的结果React的渲染过程自始至终都是纯粹的。组件就应该只返回他们的JSX，而不是改变，在渲染前，就存在的任何对象或者变量，都会是他们变得不纯粹。 例如： 1234567891011121314151617let guest = 0;function Cup() { // Bad: changing a preexisting variable! guest = guest + 1; return &lt;h2&gt;Tea cup for guest #{guest}&lt;/h2&gt;;}export default function TeaSet() { return ( &lt;&gt; &lt;Cup /&gt; &lt;Cup /&gt; &lt;Cup /&gt; &lt;/&gt; );} 以上组件，在读取外部guest的变量，这将导致React组件每次返回的JSX都是不同的。如果这时候，其他组件也在读取这个变量的话，他们也会产生不同的JSX。 这时候就可以这样修改： 我们将变量作为Props(输入)，输入到我们的React组件中。现在对于Props输入的变量是一样的，这时候React组件返回的JSX都是一样的。这时候React组件返回的JSX只依赖这个guestprop。 1234567891011121314function Cup({ guest }) { return &lt;h2&gt;Tea cup for guest #{guest}&lt;/h2&gt;;}export default function TeaSet() { return ( &lt;&gt; &lt;Cup guest={1} /&gt; &lt;Cup guest={2} /&gt; &lt;Cup guest={3} /&gt; &lt;/&gt; );} 一般来说，你不应该期望你的组件以特定的顺序去渲染。你要注意，其实每个组件都应该是独立的，同样地，每个组件都应该去“独立思考”去考虑自己的输入，而不是在渲染过程中试图去与其他组件协调，或者依赖于其他组件。 使用严格模式检测不纯的计算当用户输入改变某些内容时，你应该设置状态，而不是直接写入变量。当组件渲染时，你永远不应该改变预先存在的变量或者对象。 React提供了“严格模式”，在严格模式下开发，他将会调用每个组件函数俩次。通过重复调用组件函数，严格模式有助找到违反这些规则的组件。 纯函数仅仅执行计算，因此调用它们两次不会改变任何东西 — 就像两次调用 double(2) 并不会改变返回值，两次求解 y = 2x 不会改变 y 的值一样。相同的输入，总是返回相同的输出。 严格模式在生产环境下不生效，因此它不会降低应用程序的速度。如需引入严格模式，你可以用 &lt;React.StrictMode&gt; 包裹根组件。一些框架会默认这样做。 局部mutation：组件的小秘密以上示例的问题是在渲染过程中，组件改变了预先存在的变量的值。 这种现象我们称之为突变（mutation）。纯函数不会改变函数作用域以外的变量、或在函数调用前创建的对象，这会使函数变得不纯粹！ 但是，你完全可以在渲染时更改你**刚刚**创建的变量和对象。 看下面示例： 1234567891011function Cup({ guest }) { return &lt;h2&gt;Tea cup for guest #{guest}&lt;/h2&gt;;}export default function TeaGathering() { let cups = []; for (let i = 1; i &lt;= 12; i++) { cups.push(&lt;Cup key={i} guest={i} /&gt;); } return cups;} 上面cups变量是在TeaGathering函数内部创建的，函数外部不知道发生了什么。这就被称为 “局部 mutation” — 如同藏在组件里的小秘密。 哪些地方可能引发副作用函数式编程很大程度依赖纯函数，但在某些事物在特定情况下不得不发生改变。这些变动包含更新屏幕、启动动画、更改数据等，他们被称为副作用。这些都是“额外”发生的事情，与渲染过程无关。 在React中，副作用通常属于事件处理程序。事件处理程序是React在你执行某些操作（如单击按钮）时运行的函数。即使事件处理程序是在组件内部定义的，他们也不会在渲染期间运行！**因此事件处理程序无需事纯函数。** 无法为副作用找到合适的事件处理程序，你还可以调用组件中的useEffect方法将其附加到返回的JSX中，这会将告诉React在渲染结束后执行他。然而，这种方法应该是最后的手段。 为什么React如此侧重于纯函数？？纯函数的编写需要遵循一些习惯和规程。 你的组件在不同环境运行。这样针对相同的输入，都会返回相同的结果。 可以为那些未更改的组件来跳过渲染，可以提高性能。因为纯函数总是返回相同的结果，所以可以安全的缓存他们。 如果在渲染深层组件树的过程中，数据发生了变化，React可以重新开始渲染，不会浪费时间完成过时的渲染。纯粹性使得它随时可以安全的停止计算。 将UI视为树树是项目和UI之间的关系模型，通常使用树结构来表示UI。例如，浏览器使用树结构来构建HTM（DOM）与CSS（CSSOM）。移动平台也使用树来表示试图层次机构。 与浏览器和移动平台一样，React 还使用树结构来管理和建模 React 应用程序中组件之间的关系。这些树是有用的工具，用于理解数据如何在 React 应用程序中流动以及如何优化呈现和应用程序大小。 渲染树组件的主要特性是能够根据其他组件组合而成。组件是能够嵌套的，其中一个组件的父组件也可能是其他组件的自组件。 React在渲染的时候，会在渲染树中建模这种层级关系。这棵树是由节点组成，每个节点代表一个组件。 在React渲染树中，根节点是应用程序的跟组件。这种情况下，根组件是App，他是React渲染的第一个组件。树的每个箭头从父组件指向子组件。 渲染树表示 React 应用程序的单个渲染过程。在 条件渲染 中，父组件可以根据传递的数据渲染不同的子组件。 存在条件渲染的时候，渲染过程的渲染树可能都不同，但是这些树有助于识别React应用程序中的顶级和叶子组件。顶级组件是距离根组件最近的组件，他会影响其下所有的组件渲染性能，通常包含最多复杂性。叶子组件位于树的底部，没有子组件，通常会频繁重新渲染。 识别这些组件类别有助于应用程序的数据流和性能。 模块依赖树在React应用程序中，可以用树来建模的另一个关系是应用程序的模块依赖关系。当拆分组件和逻辑到不同的文件时，就创建了JavaScript模块，在这些模块中可以导出组件、函数或常量。 模块依赖树中的每个节点都是一个模块，每个分支代表该模块中的 import 语句。 以之前的 Inspirations 应用程序为例，可以构建一个模块依赖树，简称依赖树。 树的根节点是根模块，也称入口文件。它通常包含根组件的模块。 与同一应用程序的渲染树相比，存在相似的结构，但也存在一些显著的差异： 构成树的节点代表模块，而不是组件。 非组件模块。树中也有体现，渲染树仅封装组件。 组件嵌套中，父组件接受JSX作为children props,子组件渲染出来，但不导入该模块。 依赖树对于确定React应用程序所需要的模块是很有用的。在生产环境构建React应用时，通常会有构建步骤，该步骤将捆绑所有有必要的JavaScript以供客户端使用。负责操作的工具成为bundler(捆绑器)，并且bunder将使用依赖树来确定应该包含哪些模块。 随着应用程序的增长，捆绑包大小通常也会增加。大型捆绑包大小对于客户端来说下载和运行成本高昂，并延迟 UI 绘制的时间。了解应用程序的依赖树可能有助于调试这些问题 现在存在一个html标签 1234567891011&lt;h1&gt;海蒂·拉玛的待办事项&lt;/h1&gt;&lt;img src=\"https://i.imgur.com/yXOvdOSs.jpg\" alt=\"Hedy Lamarr\" class=\"photo\"&gt;&lt;ul&gt; &lt;li&gt;发明一种新式交通信号灯 &lt;li&gt;排练一个电影场景 &lt;li&gt;改进频谱技术&lt;/ul&gt; 此时需要将它转化为React组件，可以这么做，是的没错。 采用 *** &lt;&gt; 或者其他标签*** 包裹。 123456789101112131415export default function TodoList() { return ( &lt;&gt; &lt;h1&gt;海蒂·拉玛的待办事项&lt;/h1&gt; &lt;img src=\"https://i.imgur.com/yXOvdOSs.jpg\" alt=\"Hedy Lamarr\" className=\"photo\" /&gt; &lt;ul&gt; &lt;li&gt;发明一种新式交通信号灯&lt;/li&gt; &lt;li&gt;排练一个电影场景&lt;/li&gt; &lt;li&gt;改进频谱技术&lt;/li&gt; &lt;/ul&gt; &lt;/&gt; JSX语法规则 只能返回一个根元素 就是return（）中必须只有一个根元素 不想在标签中增加一个额外的 ，可以用 &lt;&gt; 和 &lt;/&gt; 元素来代替 标签必须闭合 使用驼峰式命名法给大部分属性命名！ JSX 最终会被转化为 JavaScript，而 JSX 中的属性也会变成 JavaScript 对象中的键值对。在组件中，经常会遇到需要用变量的方式读取这些属性的时候。但 JavaScript 对变量的命名有限制。例如，变量名称不能包含 - 符号或者像 class 这样的保留字。 JSX 虽然看起来很像 HTML，但在底层其实被转化为了 JavaScript 对象，你不能在一个函数中返回多个对象，除非用一个数组把他们包装起来。这就是为什么多个 JSX 标签必须要用一个父元素或者 Fragment 来包裹。 JSX中通过大括号使用javaScriptJSX可以在JavaScript中编写类似HTML的标签，保证渲染逻辑和内容绑定。在需要在标签中添加Js逻辑或者引用标签的动态属性的时候可以在JSX的大括号里面编写Js。 JSX使用引号字符串 当你想将字符串属性传递给JSX时，放在单引号或者双引号中 当你想动态传值时，可以使用{ 和 } 替代 “ 和 “ 123456789101112131415161718192021222324// 字符串export default function Avatar() { return ( &lt;img className=\"avatar\" src=\"https://i.imgur.com/7vQD0fPs.jpg\" alt=\"Gregorio Y. Zara\" /&gt; );}// 变量export default function Avatar() { const avatar = 'https://i.imgur.com/7vQD0fPs.jpg'; const description = 'Gregorio Y. Zara'; return ( &lt;img className=\"avatar\" src={avatar} alt={description} /&gt; );} 注意:当使用src={ } 这种写法会去读取花括号中js中这个变量的值。 标签插值 JSX中允许在标签中插入大括号{}中使用变量 JSX中允许在标签中插入大括号{}中使用函数表达式 1234567891011121314151617181920212223// 变量export default function TodoList() { const name = 'Gregorio Y. Zara'; return ( &lt;h1&gt;{name}'s To Do List&lt;/h1&gt; );}// 函数表达式const today = new Date();function formatDate(date) { return new Intl.DateTimeFormat( 'zh-CN', { weekday: 'long' } ).format(date);}export default function TodoList() { return ( &lt;h1&gt;To Do List for {formatDate(today)}&lt;/h1&gt; );} 大括号的使用场景主要场景是字符串、数字、变量、和js表达式。 用作JSX标签*内部的文本*：&lt;h1&gt;{name}'s To Do List&lt;/h1&gt; 标签***=*后面紧跟的属性**：src={avatar} 会读取 avatar 变量，但是！！！对于src=\"{avatar}\"只会传一个字符串{avatar} 双大括号的使用场景双大括号其实是{}传递对象的传递方式。 对象也用大括号表示，例如 { name: \"Hedy Lamarr\", inventions: 5 }。因此，为了能在 JSX 中传递，必须用另一对额外的大括号包裹对象：person={{ name: \"Hedy Lamarr\", inventions: 5 }}。 也可使用嵌套对象，在jsx大括号中使用。 注意：内联 style 属性 使用驼峰命名法编写。例如，HTML &lt;ul style=\"background-color: black\"&gt; 在你的组件里应该写成 &lt;ul style={{ backgroundColor: 'black' }}&gt;。 12345678910111213141516171819202122232425262728293031323334353637383940// 对象传递export default function TodoList() { return ( &lt;ul style={{ backgroundColor: 'black', color: 'pink' }}&gt; &lt;li&gt;Improve the videophone&lt;/li&gt; &lt;li&gt;Prepare aeronautics lectures&lt;/li&gt; &lt;li&gt;Work on the alcohol-fuelled engine&lt;/li&gt; &lt;/ul&gt; );}// 嵌套对象传递const person = { name: 'Gregorio Y. Zara', theme: { backgroundColor: 'black', color: 'pink' }};export default function TodoList() { return ( &lt;div style={person.theme}&gt; &lt;h1&gt;{person.name}'s Todos&lt;/h1&gt; &lt;img className=\"avatar\" src=\"https://i.imgur.com/7vQD0fPs.jpg\" alt=\"Gregorio Y. Zara\" /&gt; &lt;ul&gt; &lt;li&gt;Improve the videophone&lt;/li&gt; &lt;li&gt;Prepare aeronautics lectures&lt;/li&gt; &lt;li&gt;Work on the alcohol-fuelled engine&lt;/li&gt; &lt;/ul&gt; &lt;/div&gt; );} Props组件传递React组件使用Props互相通信。每个父组件都可以提供props给他的自组件传递信息。可以通过Props传递认识JavaScript值，包括对象、数组、和函数。 Props传递类似HTML预定义的属性。像组件传递的时候可以传递任意的props。传递的props可以通过不同的方式进行渲染。 123456789101112131415161718192021222324// 其中person就是props/* 其中的花括号也就是props传递对象而已*/// 1、传递export default function Profile() { return ( &lt;Avatar person={{ name: 'Lin Lanying', imageId: '1bX5QH6' }} size={100} /&gt; );}// 2、使用/读取/* 1.以下这种方式是采用解构，将person的props解构为单独的props传递 2.prop可以存在默认值，例如下面的prop size*/function Avatar({ person, size=100 }) { // 在这里 person 和 size 是可访问的} Props的使用，必须要关注你的父子组件。需要考虑好父组件需要向自组件传的props，而子组件需要考虑传递的props通过什么方式去进行渲染。事实上，**就可以总结出来,React函数组件就是接受一个参数，那就是Props对象。** Props使用妙计 prop可以指定默认值 如果渲染时不存在size的prop，那么size将被赋值100进行渲染 其实就是size的prop属性不存在或者值undefined时会生效 但是，如果传递size={null} 或 size={0}，默认值将 不 被使用。 123function Avatar({ person, size = 100 }) { // ...} 可以使用JSX展开语法传递Props 会存在需要传递pros很多，需要声明prop传递 1234567891011function Profile({ person, size, isSepia, thickBorder }) { return ( &lt;div className=\"card\"&gt; &lt;Avatar person={person} size={size} isSepia={isSepia} thickBorder={thickBorder} /&gt; &lt;/div&gt; ); 如果存在将所有的props传递给子组件可以采用简洁展开语法，这种写法，将父组件需要传递的props全部传递。如果滥用，那么建议拆分组件。 1234567function Profile(props) { return ( &lt;div className=\"card\"&gt; &lt;Avatar {...props} /&gt; &lt;/div&gt; );} 将JSX作为子组件传递 类似HTML标签嵌套，以下例子在父组件card中将children组件作为prop传递，类似vue插槽 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849// app.jsimport Avatar from './Avatar.js';function Card({ children }) { return ( &lt;div className=\"card\"&gt; {children} &lt;/div&gt; );}export default function Profile() { return ( &lt;Card&gt; &lt;Avatar size={100} person={{ name: 'Katsuko Saruhashi', imageId: 'YfeOqp2' }} /&gt; &lt;/Card&gt; );}// Avatar.jsimport { getImageUrl } from './utils.js';export default function Avatar({ person, size }) { return ( &lt;img className=\"avatar\" src={getImageUrl(person)} alt={person.name} width={size} height={size} /&gt; );}// utils.jsexport function getImageUrl(person, size = 's') { return ( 'https://i.imgur.com/' + person.imageId + size + '.jpg' );} 注意一个组件可能会随着时间的推移收到不同的 props。 Props 并不总是静态的！Props 反映了组件在任何时间点的数据，并不仅仅是在开始时。 然而，props 是 不可变的（一个计算机科学术语，意思是“不可改变”）。当一个组件需要改变它的 props（例如，响应用户交互或新数据）时，它不得不“请求”它的父组件传递 不同的 props —— 一个新对象！它的旧 props 将被丢弃，最终 JavaScript 引擎将回收它们占用的内存。不要尝试“更改 props”。 条件渲染组件中会存在很多根据条件渲染的内容。在React中可以使用js中的if 语句、&amp;&amp; 和 ? : 运算符来选择性地渲染 JSX。 如何根据条件返回JSX根据组件Prop传入的属性值来动态展示内容 使用 if/else 语句 去判断 12345678910111213141516171819202122232425262728293031// 其中isPacked是组件接受的Prop// 用来动态显示 不同li内容的展示// 可以选择 return 的组件为null 那么他将不会显示任何内容function Item({ name, isPacked }) { if (isPacked) { return &lt;li className=\"item\"&gt;{name} ✔&lt;/li&gt;; } return &lt;li className=\"item\"&gt;{name}&lt;/li&gt;;}export default function PackingList() { return ( &lt;section&gt; &lt;h1&gt;Sally Ride 的行李清单&lt;/h1&gt; &lt;ul&gt; &lt;Item isPacked={true} name=\"宇航服\" /&gt; &lt;Item isPacked={true} name=\"带金箔的头盔\" /&gt; &lt;Item isPacked={false} name=\"Tam 的照片\" /&gt; &lt;/ul&gt; &lt;/section&gt; );} 选择性包含JSX 一般的不同条件会return不同的HTML片段，此刻可以选择包含JSX的书写，一般使用以下运算符： 1、三目运算符（? :）123456789101112if (isPacked) { return &lt;li className=\"item\"&gt;{name} ✔&lt;/li&gt;;}return &lt;li className=\"item\"&gt;{name}&lt;/li&gt;;// 以上代码使用三目运算符修改为return ( &lt;li className=\"item\"&gt; {isPacked ? name + ' ✔' : name} &lt;/li&gt;); **注意：**简单的内容展示适合使用三目这种运算符来展示，如果展示的逻辑较为复杂，可选择提取自组件来渲染。 2、与运算符（&amp;&amp;）1234567// 当 JavaScript &amp;&amp; 表达式 的左侧（我们的条件）为 true 时，它则返回其右侧的值（在我们的例子里是勾选符号）。但条件的结果是 false，则整个表达式会变成 false。在 JSX 里，React 会将 false 视为一个“空值”，就像 null 或者 undefined，这样 React 就不会在这里进行任何渲染return ( &lt;li className=\"item\"&gt; {name} {isPacked &amp;&amp; '✔'} &lt;/li&gt;); 注意：切勿将数字放在 &amp;&amp; 左侧. JavaScript 会自动将左侧的值转换成布尔类型以判断条件成立与否。然而，如果左侧是 0，整个表达式将变成左侧的值（0），React 此时则会渲染 0 而不是不进行渲染。 例如，一个常见的错误是 messageCount &amp;&amp; &lt;p&gt;New messages&lt;/p&gt;。其原本是想当 messageCount 为 0 的时候不进行渲染，但实际上却渲染了 0。 为了更正，可以将左侧的值改成布尔类型：messageCount &gt; 0 &amp;&amp; &lt;p&gt;New messages&lt;/p&gt;。 选择性赋值JSX 1、可以选择将需要渲染的JSX表达式文本赋值给变量123456789101112131415161718192021222324252627282930313233343536// 其中 渲染的JSX文本 itemContent赋值变量function Item({ name, isPacked }) { let itemContent = name; if (isPacked) { itemContent = name + \" ✔\"; } return ( &lt;li className=\"item\"&gt; {itemContent} &lt;/li&gt; );}export default function PackingList() { return ( &lt;section&gt; &lt;h1&gt;Sally Ride 的行李清单&lt;/h1&gt; &lt;ul&gt; &lt;Item isPacked={true} name=\"宇航服\" /&gt; &lt;Item isPacked={true} name=\"带金箔的头盔\" /&gt; &lt;Item isPacked={false} name=\"Tam 的照片\" /&gt; &lt;/ul&gt; &lt;/section&gt; );} 2、对于任意的JSX也是适用的123456789101112131415161718192021222324252627282930313233343536373839// 对于JSX itemContent 提取为变量 在return时便可直接使用变量 迭代修改时容易扩展function Item({ name, isPacked }) { let itemContent = name; if (isPacked) { itemContent = ( &lt;del&gt; {name + \" ✔\"} &lt;/del&gt; ); } return ( &lt;li className=\"item\"&gt; {itemContent} &lt;/li&gt; );}export default function PackingList() { return ( &lt;section&gt; &lt;h1&gt;Sally Ride 的行李清单&lt;/h1&gt; &lt;ul&gt; &lt;Item isPacked={true} name=\"宇航服\" /&gt; &lt;Item isPacked={true} name=\"带金箔的头盔\" /&gt; &lt;Item isPacked={false} name=\"Tam 的照片\" /&gt; &lt;/ul&gt; &lt;/section&gt; );} 渲染列表一般来说，我们经常通过JavaScript数组方法来操作数组中的数据，从而将数组中的数据渲染为多个类似的组件。 遍历渲染123456789101112131415161718192021222324252627282930// 首先我们拥有一个数组数据。const people = [ '凯瑟琳·约翰逊: 数学家', '马里奥·莫利纳: 化学家', '穆罕默德·阿卜杜勒·萨拉姆: 物理学家', '珀西·莱温·朱利亚: 化学家', '苏布拉马尼扬·钱德拉塞卡: 天体物理学家',];// 我们可以使用数组的遍历方法map这个数组来遍历元素const listItem = people.map(person=&gt;&lt;li&gt;{person}&lt;/li&gt;) // 用ul将listItem包围return &lt;ul&gt;{listItem}&lt;/ul&gt;// 最终代码const people = [ '凯瑟琳·约翰逊: 数学家', '马里奥·莫利纳: 化学家', '穆罕默德·阿卜杜勒·萨拉姆: 物理学家', '珀西·莱温·朱利亚: 化学家', '苏布拉马尼扬·钱德拉塞卡: 天体物理学家',];export default function List() { const listItems = people.map(person =&gt; &lt;li&gt;{person}&lt;/li&gt; ); return &lt;ul&gt;{listItems}&lt;/ul&gt;;} 注意：这样会导致没有唯一key报错。 过滤渲染我们有个需求需要将职业为化学家的元素渲染出来 12345678910111213141516171819202122232425262728293031323334353637383940// 数组const people = [ { id: 0, name: '凯瑟琳·约翰逊', profession: '数学家', }, { id: 1, name: '马里奥·莫利纳', profession: '化学家', }, { id: 2, name: '穆罕默德·阿卜杜勒·萨拉姆', profession: '物理学家', }, { name: '珀西·莱温·朱利亚', profession: '化学家', }, { name: '苏布拉马尼扬·钱德拉塞卡', profession: '天体物理学家', },];// 采用数组filter方法进行过滤const liItem = people.filter(person=&gt;person.profession==='化学家')// 用ul将liIte包围return &lt;ul&gt;{liItem}&lt;/ul&gt;// 完整代码export default function List() { const listItems = people.map(person =&gt; &lt;li&gt;{person}&lt;/li&gt; ); return &lt;ul&gt;{listItems}&lt;/ul&gt;;} 用key能保证渲染顺序直接放在 map() 方法里的 JSX 元素一般都需要指定 key 值！ 这些key会告诉React，每个组件对应的数组数据那一项，去进行匹配。 这些将在数组项进行移动、插入或者删除等操作是非常重要的。合适的key将保证React正常的更新DMO树。 key值在渲染之前，要存在数据里面key必须存在。 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869// app.jsimport { people } from './data.js';import { getImageUrl } from './utils.js';export default function List() { const listItems = people.map(person =&gt; &lt;li key={person.id}&gt; &lt;img src={getImageUrl(person)} alt={person.name} /&gt; &lt;p&gt; &lt;b&gt;{person.name}&lt;/b&gt; {' ' + person.profession + ' '} 因{person.accomplishment}而闻名世界 &lt;/p&gt; &lt;/li&gt; ); return &lt;ul&gt;{listItems}&lt;/ul&gt;;}// data.jsexport const people = [ { id: 0, // 在 JSX 中作为 key 使用 name: '凯瑟琳·约翰逊', profession: '数学家', accomplishment: '太空飞行相关数值的核算', imageId: 'MK3eW3A', }, { id: 1, // 在 JSX 中作为 key 使用 name: '马里奥·莫利纳', profession: '化学家', accomplishment: '北极臭氧空洞的发现', imageId: 'mynHUSa', }, { id: 2, // 在 JSX 中作为 key 使用 name: '穆罕默德·阿卜杜勒·萨拉姆', profession: '物理学家', accomplishment: '关于基本粒子间弱相互作用和电磁相互作用的统一理论', imageId: 'bE7W1ji', }, { id: 3, // 在 JSX 中作为 key 使用 name: '珀西·莱温·朱利亚', profession: '化学家', accomplishment: '开创性的可的松药物、类固醇和避孕药', imageId: 'IOjWm71', }, { id: 4, // 在 JSX 中作为 key 使用 name: '苏布拉马尼扬·钱德拉塞卡', profession: '天体物理学家', accomplishment: '白矮星质量计算', imageId: 'lrWQx8l', },];// util.jsexport function getImageUrl(person) { return ( 'https://i.imgur.com/' + person.imageId + 's.jpg' );} 如何在列表项显示多个DOM节点？？ 我需要将每个列表多渲染其他DOM节点。使用Fragment的语法简写&lt;&gt;&lt;/&gt;无法接受key值。写法存在要不使用包裹，或者使用明确的&lt;Fragment&gt;。 Fragment标签不会出现在DOM上，代码会转成最终的&lt;h1&gt;、&lt;p&gt;、&lt;h1&gt;、&lt;p&gt;…… 的列表。 12345678910import { Fragment } from 'react';// ...const listItems = people.map(person =&gt; &lt;Fragment key={person.id}&gt; &lt;h1&gt;{person.name}&lt;/h1&gt; &lt;p&gt;{person.bio}&lt;/p&gt; &lt;/Fragment&gt;); 如何设置key不同来源数据对应不同的key值获取方式： 来自数据库的数据：数据存在唯一的主键，可以直接使用。 本地产生的数据：可以使用自增计数器或者uuid的库生成唯一的key。 key值需要满足的条件 key在兄弟节点必须是唯一的。不需要全局唯一，不同数组可以使用相同的key。 key值不可改变。一定不可以在渲染时候的动态生成key。 为什么需要key？？React的key作用，其实都是可以从众多兄弟元素中能够标识出某一项（JSX节点）。这个提供的key提供的信息不止是这个元素所在的位置。即使元素的位置在渲染工程中发现了改变，它对应的key能够让React在整个生命周期一直可以使用。 注意： 不可以直接使用数组的索引作为key值来使用。如果没有显式指定key，React会默认讲索引作为key。当数组项的顺序在插入、删除或者重新排序等操作中发生改变。此时会出现一些难以排查的bug。 不要使用随机数去动态生成key，这样会导致每次渲染key不一样，React这样会认为你在频繁修改DOM，将会导致所有的组件和DOM元素重新渲染。会导致渲染问题，还会导致用户输入丢失。一定要保证key值的稳定性。 组件不会将key当作props的一部分。key值只会对React起到提示作用。 保持组件纯粹纯函数纯函数具有以下特征： 只负责自己的任务。他不会更改在该函数调用前就已经存在的对象和变量。 输入相同，则输出相同。给定相同的输入，纯函数总是返回相同的结果。 React围绕纯函数的概念进行设计。React假设你编写的所有组件都是纯函数。也就是说对于相同的输入，你所编写的React组件将会总是返回相同的JSX。 就像数学公式一样。你传入的值相同，你将会永远得到相同的结果。 再比如，可以将组件比作食谱。如果你遵循正常的菜谱（也就是相同的规律或者规则），在烹饪过程中不引进新食材，那么每次得到的菜肴都是相同的。这个菜肴就是React组件渲染返回的JSX。 副作用：（不符合）预期的结果React的渲染过程自始至终都是纯粹的。组件就应该只返回他们的JSX，而不是改变，在渲染前，就存在的任何对象或者变量，都会是他们变得不纯粹。 例如： 1234567891011121314151617let guest = 0;function Cup() { // Bad: changing a preexisting variable! guest = guest + 1; return &lt;h2&gt;Tea cup for guest #{guest}&lt;/h2&gt;;}export default function TeaSet() { return ( &lt;&gt; &lt;Cup /&gt; &lt;Cup /&gt; &lt;Cup /&gt; &lt;/&gt; );} 以上组件，在读取外部guest的变量，这将导致React组件每次返回的JSX都是不同的。如果这时候，其他组件也在读取这个变量的话，他们也会产生不同的JSX。 这时候就可以这样修改： 我们将变量作为Props(输入)，输入到我们的React组件中。现在对于Props输入的变量是一样的，这时候React组件返回的JSX都是一样的。这时候React组件返回的JSX只依赖这个guestprop。 1234567891011121314function Cup({ guest }) { return &lt;h2&gt;Tea cup for guest #{guest}&lt;/h2&gt;;}export default function TeaSet() { return ( &lt;&gt; &lt;Cup guest={1} /&gt; &lt;Cup guest={2} /&gt; &lt;Cup guest={3} /&gt; &lt;/&gt; );} 一般来说，你不应该期望你的组件以特定的顺序去渲染。你要注意，其实每个组件都应该是独立的，同样地，每个组件都应该去“独立思考”去考虑自己的输入，而不是在渲染过程中试图去与其他组件协调，或者依赖于其他组件。 使用严格模式检测不纯的计算当用户输入改变某些内容时，你应该设置状态，而不是直接写入变量。当组件渲染时，你永远不应该改变预先存在的变量或者对象。 React提供了“严格模式”，在严格模式下开发，他将会调用每个组件函数俩次。通过重复调用组件函数，严格模式有助找到违反这些规则的组件。 纯函数仅仅执行计算，因此调用它们两次不会改变任何东西 — 就像两次调用 double(2) 并不会改变返回值，两次求解 y = 2x 不会改变 y 的值一样。相同的输入，总是返回相同的输出。 严格模式在生产环境下不生效，因此它不会降低应用程序的速度。如需引入严格模式，你可以用 &lt;React.StrictMode&gt; 包裹根组件。一些框架会默认这样做。 局部mutation：组件的小秘密以上示例的问题是在渲染过程中，组件改变了预先存在的变量的值。 这种现象我们称之为突变（mutation）。纯函数不会改变函数作用域以外的变量、或在函数调用前创建的对象，这会使函数变得不纯粹！ 但是，你完全可以在渲染时更改你**刚刚**创建的变量和对象。 看下面示例： 1234567891011function Cup({ guest }) { return &lt;h2&gt;Tea cup for guest #{guest}&lt;/h2&gt;;}export default function TeaGathering() { let cups = []; for (let i = 1; i &lt;= 12; i++) { cups.push(&lt;Cup key={i} guest={i} /&gt;); } return cups;} 上面cups变量是在TeaGathering函数内部创建的，函数外部不知道发生了什么。这就被称为 “局部 mutation” — 如同藏在组件里的小秘密。 哪些地方可能引发副作用函数式编程很大程度依赖纯函数，但在某些事物在特定情况下不得不发生改变。这些变动包含更新屏幕、启动动画、更改数据等，他们被称为副作用。这些都是“额外”发生的事情，与渲染过程无关。 在React中，副作用通常属于事件处理程序。事件处理程序是React在你执行某些操作（如单击按钮）时运行的函数。即使事件处理程序是在组件内部定义的，他们也不会在渲染期间运行！**因此事件处理程序无需事纯函数。** 无法为副作用找到合适的事件处理程序，你还可以调用组件中的useEffect方法将其附加到返回的JSX中，这会将告诉React在渲染结束后执行他。然而，这种方法应该是最后的手段。 为什么React如此侧重于纯函数？？纯函数的编写需要遵循一些习惯和规程。 你的组件在不同环境运行。这样针对相同的输入，都会返回相同的结果。 可以为那些未更改的组件来跳过渲染，可以提高性能。因为纯函数总是返回相同的结果，所以可以安全的缓存他们。 如果在渲染深层组件树的过程中，数据发生了变化，React可以重新开始渲染，不会浪费时间完成过时的渲染。纯粹性使得它随时可以安全的停止计算。 将UI视为树树是项目和UI之间的关系模型，通常使用树结构来表示UI。例如，浏览器使用树结构来构建HTM（DOM）与CSS（CSSOM）。移动平台也使用树来表示试图层次机构。 与浏览器和移动平台一样，React 还使用树结构来管理和建模 React 应用程序中组件之间的关系。这些树是有用的工具，用于理解数据如何在 React 应用程序中流动以及如何优化呈现和应用程序大小。 渲染树组件的主要特性是能够根据其他组件组合而成。组件是能够嵌套的，其中一个组件的父组件也可能是其他组件的自组件。 React在渲染的时候，会在渲染树中建模这种层级关系。这棵树是由节点组成，每个节点代表一个组件。 在React渲染树中，根节点是应用程序的跟组件。这种情况下，根组件是App，他是React渲染的第一个组件。树的每个箭头从父组件指向子组件。 渲染树表示 React 应用程序的单个渲染过程。在 条件渲染 中，父组件可以根据传递的数据渲染不同的子组件。 存在条件渲染的时候，渲染过程的渲染树可能都不同，但是这些树有助于识别React应用程序中的顶级和叶子组件。顶级组件是距离根组件最近的组件，他会影响其下所有的组件渲染性能，通常包含最多复杂性。叶子组件位于树的底部，没有子组件，通常会频繁重新渲染。 识别这些组件类别有助于应用程序的数据流和性能。 模块依赖树在React应用程序中，可以用树来建模的另一个关系是应用程序的模块依赖关系。当拆分组件和逻辑到不同的文件时，就创建了JavaScript模块，在这些模块中可以导出组件、函数或常量。 模块依赖树中的每个节点都是一个模块，每个分支代表该模块中的 import 语句。 以之前的 Inspirations 应用程序为例，可以构建一个模块依赖树，简称依赖树。 树的根节点是根模块，也称入口文件。它通常包含根组件的模块。 与同一应用程序的渲染树相比，存在相似的结构，但也存在一些显著的差异： 构成树的节点代表模块，而不是组件。 非组件模块。树中也有体现，渲染树仅封装组件。 组件嵌套中，父组件接受JSX作为children props,子组件渲染出来，但不导入该模块。 依赖树对于确定React应用程序所需要的模块是很有用的。在生产环境构建React应用时，通常会有构建步骤，该步骤将捆绑所有有必要的JavaScript以供客户端使用。负责操作的工具成为bundler(捆绑器)，并且bunder将使用依赖树来确定应该包含哪些模块。 随着应用程序的增长，捆绑包大小通常也会增加。大型捆绑包大小对于客户端来说下载和运行成本高昂，并延迟 UI 绘制的时间。了解应用程序的依赖树可能有助于调试这些问题 什么是JSXJSX 是 JavaScript 语法扩展，可以让在 JavaScript 文件中书写类似 HTML 的标签。JSX 看起来和 HTML 很像，但它的语法更加严格并且可以动态展示信息。 为什么出现JSX随着Web交互性越来越强，逻辑开始决定页面的内容。也就是可以说JavaScript负责HTML内容。因此，在React中，渲染逻辑和标签存在同一个组件文件中。 使用JSX的优势例如将一个按钮的渲染逻辑和标签放在一起，可以确保他们在编辑的时候保持同步。反之，也可以说彼此无关的细节是隔离的。 JSX与HTML的区别每个 React 组件都是一个 JavaScript 函数，它会返回一些标签，React 会将这些标签渲染到浏览器上。React 组件使用一种被称为 JSX 的语法扩展来描述这些标签。JSX对于HTML来说，语法更加严格并且可以动态的展示信息。 JSX and React 是相互独立的东西。通常配合使用，也可以单独使用它们中的任意一个，JSX 是一种语法扩展，而 React 则是一个 JavaScript 的库。 HTML转换为JSX现在存在一个html标签 1234567891011&lt;h1&gt;海蒂·拉玛的待办事项&lt;/h1&gt;&lt;img src=\"https://i.imgur.com/yXOvdOSs.jpg\" alt=\"Hedy Lamarr\" class=\"photo\"&gt;&lt;ul&gt; &lt;li&gt;发明一种新式交通信号灯 &lt;li&gt;排练一个电影场景 &lt;li&gt;改进频谱技术&lt;/ul&gt; 此时需要将它转化为React组件，可以这么做，是的没错。 采用 *** &lt;&gt; 或者其他标签*** 包裹。 123456789101112131415export default function TodoList() { return ( &lt;&gt; &lt;h1&gt;海蒂·拉玛的待办事项&lt;/h1&gt; &lt;img src=\"https://i.imgur.com/yXOvdOSs.jpg\" alt=\"Hedy Lamarr\" className=\"photo\" /&gt; &lt;ul&gt; &lt;li&gt;发明一种新式交通信号灯&lt;/li&gt; &lt;li&gt;排练一个电影场景&lt;/li&gt; &lt;li&gt;改进频谱技术&lt;/li&gt; &lt;/ul&gt; &lt;/&gt; JSX语法规则 只能返回一个根元素 就是return（）中必须只有一个根元素 不想在标签中增加一个额外的 ，可以用 &lt;&gt; 和 &lt;/&gt; 元素来代替 标签必须闭合 使用驼峰式命名法给大部分属性命名！ JSX 最终会被转化为 JavaScript，而 JSX 中的属性也会变成 JavaScript 对象中的键值对。在组件中，经常会遇到需要用变量的方式读取这些属性的时候。但 JavaScript 对变量的命名有限制。例如，变量名称不能包含 - 符号或者像 class 这样的保留字。 JSX 虽然看起来很像 HTML，但在底层其实被转化为了 JavaScript 对象，你不能在一个函数中返回多个对象，除非用一个数组把他们包装起来。这就是为什么多个 JSX 标签必须要用一个父元素或者 Fragment 来包裹。 JSX中通过大括号使用javaScriptJSX可以在JavaScript中编写类似HTML的标签，保证渲染逻辑和内容绑定。在需要在标签中添加Js逻辑或者引用标签的动态属性的时候可以在JSX的大括号里面编写Js。 JSX使用引号字符串 当你想将字符串属性传递给JSX时，放在单引号或者双引号中 当你想动态传值时，可以使用{ 和 } 替代 “ 和 “ 123456789101112131415161718192021222324// 字符串export default function Avatar() { return ( &lt;img className=\"avatar\" src=\"https://i.imgur.com/7vQD0fPs.jpg\" alt=\"Gregorio Y. Zara\" /&gt; );}// 变量export default function Avatar() { const avatar = 'https://i.imgur.com/7vQD0fPs.jpg'; const description = 'Gregorio Y. Zara'; return ( &lt;img className=\"avatar\" src={avatar} alt={description} /&gt; );} 注意:当使用src={ } 这种写法会去读取花括号中js中这个变量的值。 标签插值 JSX中允许在标签中插入大括号{}中使用变量 JSX中允许在标签中插入大括号{}中使用函数表达式 1234567891011121314151617181920212223// 变量export default function TodoList() { const name = 'Gregorio Y. Zara'; return ( &lt;h1&gt;{name}'s To Do List&lt;/h1&gt; );}// 函数表达式const today = new Date();function formatDate(date) { return new Intl.DateTimeFormat( 'zh-CN', { weekday: 'long' } ).format(date);}export default function TodoList() { return ( &lt;h1&gt;To Do List for {formatDate(today)}&lt;/h1&gt; );} 大括号的使用场景主要场景是字符串、数字、变量、和js表达式。 用作JSX标签*内部的文本*：&lt;h1&gt;{name}'s To Do List&lt;/h1&gt; 标签***=*后面紧跟的属性**：src={avatar} 会读取 avatar 变量，但是！！！对于src=\"{avatar}\"只会传一个字符串{avatar} 双大括号的使用场景双大括号其实是{}传递对象的传递方式。 对象也用大括号表示，例如 { name: \"Hedy Lamarr\", inventions: 5 }。因此，为了能在 JSX 中传递，必须用另一对额外的大括号包裹对象：person={{ name: \"Hedy Lamarr\", inventions: 5 }}。 也可使用嵌套对象，在jsx大括号中使用。 注意：内联 style 属性 使用驼峰命名法编写。例如，HTML &lt;ul style=\"background-color: black\"&gt; 在你的组件里应该写成 &lt;ul style={{ backgroundColor: 'black' }}&gt;。 12345678910111213141516171819202122232425262728293031323334353637383940// 对象传递export default function TodoList() { return ( &lt;ul style={{ backgroundColor: 'black', color: 'pink' }}&gt; &lt;li&gt;Improve the videophone&lt;/li&gt; &lt;li&gt;Prepare aeronautics lectures&lt;/li&gt; &lt;li&gt;Work on the alcohol-fuelled engine&lt;/li&gt; &lt;/ul&gt; );}// 嵌套对象传递const person = { name: 'Gregorio Y. Zara', theme: { backgroundColor: 'black', color: 'pink' }};export default function TodoList() { return ( &lt;div style={person.theme}&gt; &lt;h1&gt;{person.name}'s Todos&lt;/h1&gt; &lt;img className=\"avatar\" src=\"https://i.imgur.com/7vQD0fPs.jpg\" alt=\"Gregorio Y. Zara\" /&gt; &lt;ul&gt; &lt;li&gt;Improve the videophone&lt;/li&gt; &lt;li&gt;Prepare aeronautics lectures&lt;/li&gt; &lt;li&gt;Work on the alcohol-fuelled engine&lt;/li&gt; &lt;/ul&gt; &lt;/div&gt; );} Props组件传递React组件使用Props互相通信。每个父组件都可以提供props给他的自组件传递信息。可以通过Props传递认识JavaScript值，包括对象、数组、和函数。 Props传递类似HTML预定义的属性。像组件传递的时候可以传递任意的props。传递的props可以通过不同的方式进行渲染。 123456789101112131415161718192021222324// 其中person就是props/* 其中的花括号也就是props传递对象而已*/// 1、传递export default function Profile() { return ( &lt;Avatar person={{ name: 'Lin Lanying', imageId: '1bX5QH6' }} size={100} /&gt; );}// 2、使用/读取/* 1.以下这种方式是采用解构，将person的props解构为单独的props传递 2.prop可以存在默认值，例如下面的prop size*/function Avatar({ person, size=100 }) { // 在这里 person 和 size 是可访问的} Props的使用，必须要关注你的父子组件。需要考虑好父组件需要向自组件传的props，而子组件需要考虑传递的props通过什么方式去进行渲染。事实上，**就可以总结出来,React函数组件就是接受一个参数，那就是Props对象。** Props使用妙计 prop可以指定默认值 如果渲染时不存在size的prop，那么size将被赋值100进行渲染 其实就是size的prop属性不存在或者值undefined时会生效 但是，如果传递size={null} 或 size={0}，默认值将 不 被使用。 123function Avatar({ person, size = 100 }) { // ...} 可以使用JSX展开语法传递Props 会存在需要传递pros很多，需要声明prop传递 1234567891011function Profile({ person, size, isSepia, thickBorder }) { return ( &lt;div className=\"card\"&gt; &lt;Avatar person={person} size={size} isSepia={isSepia} thickBorder={thickBorder} /&gt; &lt;/div&gt; ); 如果存在将所有的props传递给子组件可以采用简洁展开语法，这种写法，将父组件需要传递的props全部传递。如果滥用，那么建议拆分组件。 1234567function Profile(props) { return ( &lt;div className=\"card\"&gt; &lt;Avatar {...props} /&gt; &lt;/div&gt; );} 将JSX作为子组件传递 类似HTML标签嵌套，以下例子在父组件card中将children组件作为prop传递，类似vue插槽 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849// app.jsimport Avatar from './Avatar.js';function Card({ children }) { return ( &lt;div className=\"card\"&gt; {children} &lt;/div&gt; );}export default function Profile() { return ( &lt;Card&gt; &lt;Avatar size={100} person={{ name: 'Katsuko Saruhashi', imageId: 'YfeOqp2' }} /&gt; &lt;/Card&gt; );}// Avatar.jsimport { getImageUrl } from './utils.js';export default function Avatar({ person, size }) { return ( &lt;img className=\"avatar\" src={getImageUrl(person)} alt={person.name} width={size} height={size} /&gt; );}// utils.jsexport function getImageUrl(person, size = 's') { return ( 'https://i.imgur.com/' + person.imageId + size + '.jpg' );} 注意一个组件可能会随着时间的推移收到不同的 props。 Props 并不总是静态的！Props 反映了组件在任何时间点的数据，并不仅仅是在开始时。 然而，props 是 不可变的（一个计算机科学术语，意思是“不可改变”）。当一个组件需要改变它的 props（例如，响应用户交互或新数据）时，它不得不“请求”它的父组件传递 不同的 props —— 一个新对象！它的旧 props 将被丢弃，最终 JavaScript 引擎将回收它们占用的内存。不要尝试“更改 props”。 条件渲染组件中会存在很多根据条件渲染的内容。在React中可以使用js中的if 语句、&amp;&amp; 和 ? : 运算符来选择性地渲染 JSX。 如何根据条件返回JSX根据组件Prop传入的属性值来动态展示内容 使用 if/else 语句 去判断 12345678910111213141516171819202122232425262728293031// 其中isPacked是组件接受的Prop// 用来动态显示 不同li内容的展示// 可以选择 return 的组件为null 那么他将不会显示任何内容function Item({ name, isPacked }) { if (isPacked) { return &lt;li className=\"item\"&gt;{name} ✔&lt;/li&gt;; } return &lt;li className=\"item\"&gt;{name}&lt;/li&gt;;}export default function PackingList() { return ( &lt;section&gt; &lt;h1&gt;Sally Ride 的行李清单&lt;/h1&gt; &lt;ul&gt; &lt;Item isPacked={true} name=\"宇航服\" /&gt; &lt;Item isPacked={true} name=\"带金箔的头盔\" /&gt; &lt;Item isPacked={false} name=\"Tam 的照片\" /&gt; &lt;/ul&gt; &lt;/section&gt; );} 选择性包含JSX 一般的不同条件会return不同的HTML片段，此刻可以选择包含JSX的书写，一般使用以下运算符： 1、三目运算符（? :）123456789101112if (isPacked) { return &lt;li className=\"item\"&gt;{name} ✔&lt;/li&gt;;}return &lt;li className=\"item\"&gt;{name}&lt;/li&gt;;// 以上代码使用三目运算符修改为return ( &lt;li className=\"item\"&gt; {isPacked ? name + ' ✔' : name} &lt;/li&gt;); **注意：**简单的内容展示适合使用三目这种运算符来展示，如果展示的逻辑较为复杂，可选择提取自组件来渲染。 2、与运算符（&amp;&amp;）1234567// 当 JavaScript &amp;&amp; 表达式 的左侧（我们的条件）为 true 时，它则返回其右侧的值（在我们的例子里是勾选符号）。但条件的结果是 false，则整个表达式会变成 false。在 JSX 里，React 会将 false 视为一个“空值”，就像 null 或者 undefined，这样 React 就不会在这里进行任何渲染return ( &lt;li className=\"item\"&gt; {name} {isPacked &amp;&amp; '✔'} &lt;/li&gt;); 注意：切勿将数字放在 &amp;&amp; 左侧. JavaScript 会自动将左侧的值转换成布尔类型以判断条件成立与否。然而，如果左侧是 0，整个表达式将变成左侧的值（0），React 此时则会渲染 0 而不是不进行渲染。 例如，一个常见的错误是 messageCount &amp;&amp; &lt;p&gt;New messages&lt;/p&gt;。其原本是想当 messageCount 为 0 的时候不进行渲染，但实际上却渲染了 0。 为了更正，可以将左侧的值改成布尔类型：messageCount &gt; 0 &amp;&amp; &lt;p&gt;New messages&lt;/p&gt;。 选择性赋值JSX 1、可以选择将需要渲染的JSX表达式文本赋值给变量123456789101112131415161718192021222324252627282930313233343536// 其中 渲染的JSX文本 itemContent赋值变量function Item({ name, isPacked }) { let itemContent = name; if (isPacked) { itemContent = name + \" ✔\"; } return ( &lt;li className=\"item\"&gt; {itemContent} &lt;/li&gt; );}export default function PackingList() { return ( &lt;section&gt; &lt;h1&gt;Sally Ride 的行李清单&lt;/h1&gt; &lt;ul&gt; &lt;Item isPacked={true} name=\"宇航服\" /&gt; &lt;Item isPacked={true} name=\"带金箔的头盔\" /&gt; &lt;Item isPacked={false} name=\"Tam 的照片\" /&gt; &lt;/ul&gt; &lt;/section&gt; );} 2、对于任意的JSX也是适用的123456789101112131415161718192021222324252627282930313233343536373839// 对于JSX itemContent 提取为变量 在return时便可直接使用变量 迭代修改时容易扩展function Item({ name, isPacked }) { let itemContent = name; if (isPacked) { itemContent = ( &lt;del&gt; {name + \" ✔\"} &lt;/del&gt; ); } return ( &lt;li className=\"item\"&gt; {itemContent} &lt;/li&gt; );}export default function PackingList() { return ( &lt;section&gt; &lt;h1&gt;Sally Ride 的行李清单&lt;/h1&gt; &lt;ul&gt; &lt;Item isPacked={true} name=\"宇航服\" /&gt; &lt;Item isPacked={true} name=\"带金箔的头盔\" /&gt; &lt;Item isPacked={false} name=\"Tam 的照片\" /&gt; &lt;/ul&gt; &lt;/section&gt; );} 渲染列表一般来说，我们经常通过JavaScript数组方法来操作数组中的数据，从而将数组中的数据渲染为多个类似的组件。 遍历渲染123456789101112131415161718192021222324252627282930// 首先我们拥有一个数组数据。const people = [ '凯瑟琳·约翰逊: 数学家', '马里奥·莫利纳: 化学家', '穆罕默德·阿卜杜勒·萨拉姆: 物理学家', '珀西·莱温·朱利亚: 化学家', '苏布拉马尼扬·钱德拉塞卡: 天体物理学家',];// 我们可以使用数组的遍历方法map这个数组来遍历元素const listItem = people.map(person=&gt;&lt;li&gt;{person}&lt;/li&gt;) // 用ul将listItem包围return &lt;ul&gt;{listItem}&lt;/ul&gt;// 最终代码const people = [ '凯瑟琳·约翰逊: 数学家', '马里奥·莫利纳: 化学家', '穆罕默德·阿卜杜勒·萨拉姆: 物理学家', '珀西·莱温·朱利亚: 化学家', '苏布拉马尼扬·钱德拉塞卡: 天体物理学家',];export default function List() { const listItems = people.map(person =&gt; &lt;li&gt;{person}&lt;/li&gt; ); return &lt;ul&gt;{listItems}&lt;/ul&gt;;} 注意：这样会导致没有唯一key报错。 过滤渲染我们有个需求需要将职业为化学家的元素渲染出来 12345678910111213141516171819202122232425262728293031323334353637383940// 数组const people = [ { id: 0, name: '凯瑟琳·约翰逊', profession: '数学家', }, { id: 1, name: '马里奥·莫利纳', profession: '化学家', }, { id: 2, name: '穆罕默德·阿卜杜勒·萨拉姆', profession: '物理学家', }, { name: '珀西·莱温·朱利亚', profession: '化学家', }, { name: '苏布拉马尼扬·钱德拉塞卡', profession: '天体物理学家', },];// 采用数组filter方法进行过滤const liItem = people.filter(person=&gt;person.profession==='化学家')// 用ul将liIte包围return &lt;ul&gt;{liItem}&lt;/ul&gt;// 完整代码export default function List() { const listItems = people.map(person =&gt; &lt;li&gt;{person}&lt;/li&gt; ); return &lt;ul&gt;{listItems}&lt;/ul&gt;;} 用key能保证渲染顺序直接放在 map() 方法里的 JSX 元素一般都需要指定 key 值！ 这些key会告诉React，每个组件对应的数组数据那一项，去进行匹配。 这些将在数组项进行移动、插入或者删除等操作是非常重要的。合适的key将保证React正常的更新DMO树。 key值在渲染之前，要存在数据里面key必须存在。 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869// app.jsimport { people } from './data.js';import { getImageUrl } from './utils.js';export default function List() { const listItems = people.map(person =&gt; &lt;li key={person.id}&gt; &lt;img src={getImageUrl(person)} alt={person.name} /&gt; &lt;p&gt; &lt;b&gt;{person.name}&lt;/b&gt; {' ' + person.profession + ' '} 因{person.accomplishment}而闻名世界 &lt;/p&gt; &lt;/li&gt; ); return &lt;ul&gt;{listItems}&lt;/ul&gt;;}// data.jsexport const people = [ { id: 0, // 在 JSX 中作为 key 使用 name: '凯瑟琳·约翰逊', profession: '数学家', accomplishment: '太空飞行相关数值的核算', imageId: 'MK3eW3A', }, { id: 1, // 在 JSX 中作为 key 使用 name: '马里奥·莫利纳', profession: '化学家', accomplishment: '北极臭氧空洞的发现', imageId: 'mynHUSa', }, { id: 2, // 在 JSX 中作为 key 使用 name: '穆罕默德·阿卜杜勒·萨拉姆', profession: '物理学家', accomplishment: '关于基本粒子间弱相互作用和电磁相互作用的统一理论', imageId: 'bE7W1ji', }, { id: 3, // 在 JSX 中作为 key 使用 name: '珀西·莱温·朱利亚', profession: '化学家', accomplishment: '开创性的可的松药物、类固醇和避孕药', imageId: 'IOjWm71', }, { id: 4, // 在 JSX 中作为 key 使用 name: '苏布拉马尼扬·钱德拉塞卡', profession: '天体物理学家', accomplishment: '白矮星质量计算', imageId: 'lrWQx8l', },];// util.jsexport function getImageUrl(person) { return ( 'https://i.imgur.com/' + person.imageId + 's.jpg' );} 如何在列表项显示多个DOM节点？？ 我需要将每个列表多渲染其他DOM节点。使用Fragment的语法简写&lt;&gt;&lt;/&gt;无法接受key值。写法存在要不使用包裹，或者使用明确的&lt;Fragment&gt;。 Fragment标签不会出现在DOM上，代码会转成最终的&lt;h1&gt;、&lt;p&gt;、&lt;h1&gt;、&lt;p&gt;…… 的列表。 12345678910import { Fragment } from 'react';// ...const listItems = people.map(person =&gt; &lt;Fragment key={person.id}&gt; &lt;h1&gt;{person.name}&lt;/h1&gt; &lt;p&gt;{person.bio}&lt;/p&gt; &lt;/Fragment&gt;); 如何设置key不同来源数据对应不同的key值获取方式： 来自数据库的数据：数据存在唯一的主键，可以直接使用。 本地产生的数据：可以使用自增计数器或者uuid的库生成唯一的key。 key值需要满足的条件 key在兄弟节点必须是唯一的。不需要全局唯一，不同数组可以使用相同的key。 key值不可改变。一定不可以在渲染时候的动态生成key。 为什么需要key？？React的key作用，其实都是可以从众多兄弟元素中能够标识出某一项（JSX节点）。这个提供的key提供的信息不止是这个元素所在的位置。即使元素的位置在渲染工程中发现了改变，它对应的key能够让React在整个生命周期一直可以使用。 注意： 不可以直接使用数组的索引作为key值来使用。如果没有显式指定key，React会默认讲索引作为key。当数组项的顺序在插入、删除或者重新排序等操作中发生改变。此时会出现一些难以排查的bug。 不要使用随机数去动态生成key，这样会导致每次渲染key不一样，React这样会认为你在频繁修改DOM，将会导致所有的组件和DOM元素重新渲染。会导致渲染问题，还会导致用户输入丢失。一定要保证key值的稳定性。 组件不会将key当作props的一部分。key值只会对React起到提示作用。 什么是JSXJSX 是 JavaScript 语法扩展，可以让在 JavaScript 文件中书写类似 HTML 的标签。JSX 看起来和 HTML 很像，但它的语法更加严格并且可以动态展示信息。 为什么出现JSX随着Web交互性越来越强，逻辑开始决定页面的内容。也就是可以说JavaScript负责HTML内容。因此，在React中，渲染逻辑和标签存在同一个组件文件中。 使用JSX的优势例如将一个按钮的渲染逻辑和标签放在一起，可以确保他们在编辑的时候保持同步。反之，也可以说彼此无关的细节是隔离的。 JSX与HTML的区别每个 React 组件都是一个 JavaScript 函数，它会返回一些标签，React 会将这些标签渲染到浏览器上。React 组件使用一种被称为 JSX 的语法扩展来描述这些标签。JSX对于HTML来说，语法更加严格并且可以动态的展示信息。 ***JSX and React 是相互独立的东西。通常配合使用，也可以单独使用它们中的任意一个，JSX 是一种语法扩展，而 React 则是一个 JavaScript 的库。 *** HTML转换为JSX现在存在一个html标签 1234567891011&lt;h1&gt;海蒂·拉玛的待办事项&lt;/h1&gt;&lt;img src=\"https://i.imgur.com/yXOvdOSs.jpg\" alt=\"Hedy Lamarr\" class=\"photo\"&gt;&lt;ul&gt; &lt;li&gt;发明一种新式交通信号灯 &lt;li&gt;排练一个电影场景 &lt;li&gt;改进频谱技术&lt;/ul&gt; 此时需要将它转化为React组件，可以这么做，是的没错。 采用 *** &lt;&gt; 或者其他标签*** 包裹。 123456789101112131415export default function TodoList() { return ( &lt;&gt; &lt;h1&gt;海蒂·拉玛的待办事项&lt;/h1&gt; &lt;img src=\"https://i.imgur.com/yXOvdOSs.jpg\" alt=\"Hedy Lamarr\" className=\"photo\" /&gt; &lt;ul&gt; &lt;li&gt;发明一种新式交通信号灯&lt;/li&gt; &lt;li&gt;排练一个电影场景&lt;/li&gt; &lt;li&gt;改进频谱技术&lt;/li&gt; &lt;/ul&gt; &lt;/&gt; JSX语法规则 只能返回一个根元素 就是return（）中必须只有一个根元素 不想在标签中增加一个额外的 ，可以用 &lt;&gt; 和 &lt;/&gt; 元素来代替 ***JSX 虽然看起来很像 HTML，但在底层其实被转化为了 JavaScript 对象，你不能在一个函数中返回多个对象，除非用一个数组把他们包装起来。这就是为什么多个 JSX 标签必须要用一个父元素或者 Fragment 来包裹。 *** 标签必须闭合 使用驼峰式命名法给大部分属性命名！ JSX 最终会被转化为 JavaScript，而 JSX 中的属性也会变成 JavaScript 对象中的键值对。在组件中，经常会遇到需要用变量的方式读取这些属性的时候。但 JavaScript 对变量的命名有限制。例如，变量名称不能包含 - 符号或者像 class 这样的保留字。 JSX中通过大括号使用javaScriptJSX可以在JavaScript中编写类似HTML的标签，保证渲染逻辑和内容绑定。在需要在标签中添加Js逻辑或者引用标签的动态属性的时候可以在JSX的大括号里面编写Js。 JSX使用引号字符串 当你想将字符串属性传递给JSX时，放在单引号或者双引号中 当你想动态传值时，可以使用{ 和 } 替代 “ 和 “ 123456789101112131415161718192021222324// 字符串export default function Avatar() { return ( &lt;img className=\"avatar\" src=\"https://i.imgur.com/7vQD0fPs.jpg\" alt=\"Gregorio Y. Zara\" /&gt; );}// 变量export default function Avatar() { const avatar = 'https://i.imgur.com/7vQD0fPs.jpg'; const description = 'Gregorio Y. Zara'; return ( &lt;img className=\"avatar\" src={avatar} alt={description} /&gt; );} 注意:当使用src={ } 这种写法会去读取花括号中js中这个变量的值。 标签插值 JSX中允许在标签中插入大括号{}中使用变量 JSX中允许在标签中插入大括号{}中使用函数表达式 1234567891011121314151617181920212223// 变量export default function TodoList() { const name = 'Gregorio Y. Zara'; return ( &lt;h1&gt;{name}'s To Do List&lt;/h1&gt; );}// 函数表达式const today = new Date();function formatDate(date) { return new Intl.DateTimeFormat( 'zh-CN', { weekday: 'long' } ).format(date);}export default function TodoList() { return ( &lt;h1&gt;To Do List for {formatDate(today)}&lt;/h1&gt; );} 大括号的使用场景主要场景是字符串、数字、变量、和js表达式。 用作JSX标签*内部的文本*：&lt;h1&gt;{name}'s To Do List&lt;/h1&gt; 标签***=*后面紧跟的属性**：src={avatar} 会读取 avatar 变量，但是！！！对于src=\"{avatar}\"只会传一个字符串{avatar} 双大括号的使用场景双大括号其实是{}传递对象的传递方式。 对象也用大括号表示，例如 { name: \"Hedy Lamarr\", inventions: 5 }。因此，为了能在 JSX 中传递，必须用另一对额外的大括号包裹对象：person={{ name: \"Hedy Lamarr\", inventions: 5 }}。 也可使用嵌套对象，在jsx大括号中使用。 注意：内联 style 属性 使用驼峰命名法编写。例如，HTML &lt;ul style=\"background-color: black\"&gt; 在你的组件里应该写成 &lt;ul style={{ backgroundColor: 'black' }}&gt;。 12345678910111213141516171819202122232425262728293031323334353637383940// 对象传递export default function TodoList() { return ( &lt;ul style={{ backgroundColor: 'black', color: 'pink' }}&gt; &lt;li&gt;Improve the videophone&lt;/li&gt; &lt;li&gt;Prepare aeronautics lectures&lt;/li&gt; &lt;li&gt;Work on the alcohol-fuelled engine&lt;/li&gt; &lt;/ul&gt; );}// 嵌套对象传递const person = { name: 'Gregorio Y. Zara', theme: { backgroundColor: 'black', color: 'pink' }};export default function TodoList() { return ( &lt;div style={person.theme}&gt; &lt;h1&gt;{person.name}'s Todos&lt;/h1&gt; &lt;img className=\"avatar\" src=\"https://i.imgur.com/7vQD0fPs.jpg\" alt=\"Gregorio Y. Zara\" /&gt; &lt;ul&gt; &lt;li&gt;Improve the videophone&lt;/li&gt; &lt;li&gt;Prepare aeronautics lectures&lt;/li&gt; &lt;li&gt;Work on the alcohol-fuelled engine&lt;/li&gt; &lt;/ul&gt; &lt;/div&gt; );} Props组件传递React组件使用Props互相通信。每个父组件都可以提供props给他的自组件传递信息。可以通过Props传递认识JavaScript值，包括对象、数组、和函数。 Props传递类似HTML预定义的属性。像组件传递的时候可以传递任意的props。传递的props可以通过不同的方式进行渲染。 123456789101112131415161718192021222324// 其中person就是props/* 其中的花括号也就是props传递对象而已*/// 1、传递export default function Profile() { return ( &lt;Avatar person={{ name: 'Lin Lanying', imageId: '1bX5QH6' }} size={100} /&gt; );}// 2、使用/读取/* 1.以下这种方式是采用解构，将person的props解构为单独的props传递 2.prop可以存在默认值，例如下面的prop size*/function Avatar({ person, size=100 }) { // 在这里 person 和 size 是可访问的} Props的使用，必须要关注你的父子组件。需要考虑好父组件需要向自组件传的props，而子组件需要考虑传递的props通过什么方式去进行渲染。事实上，**就可以总结出来,React函数组件就是接受一个参数，那就是Props对象。** Props使用妙计 prop可以指定默认值 如果渲染时不存在size的prop，那么size将被赋值100进行渲染 其实就是size的prop属性不存在或者值undefined时会生效 但是，如果传递size={null} 或 size={0}，默认值将 不 被使用。 123function Avatar({ person, size = 100 }) { // ...} 可以使用JSX展开语法传递Props 会存在需要传递pros很多，需要声明prop传递 1234567891011function Profile({ person, size, isSepia, thickBorder }) { return ( &lt;div className=\"card\"&gt; &lt;Avatar person={person} size={size} isSepia={isSepia} thickBorder={thickBorder} /&gt; &lt;/div&gt; ); 如果存在将所有的props传递给子组件可以采用简洁展开语法，这种写法，将父组件需要传递的props全部传递。如果滥用，那么建议拆分组件。 1234567function Profile(props) { return ( &lt;div className=\"card\"&gt; &lt;Avatar {...props} /&gt; &lt;/div&gt; );} 将JSX作为子组件传递 类似HTML标签嵌套，以下例子在父组件card中将children组件作为prop传递，类似vue插槽 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849// app.jsimport Avatar from './Avatar.js';function Card({ children }) { return ( &lt;div className=\"card\"&gt; {children} &lt;/div&gt; );}export default function Profile() { return ( &lt;Card&gt; &lt;Avatar size={100} person={{ name: 'Katsuko Saruhashi', imageId: 'YfeOqp2' }} /&gt; &lt;/Card&gt; );}// Avatar.jsimport { getImageUrl } from './utils.js';export default function Avatar({ person, size }) { return ( &lt;img className=\"avatar\" src={getImageUrl(person)} alt={person.name} width={size} height={size} /&gt; );}// utils.jsexport function getImageUrl(person, size = 's') { return ( 'https://i.imgur.com/' + person.imageId + size + '.jpg' );} 注意一个组件可能会随着时间的推移收到不同的 props。 Props 并不总是静态的！Props 反映了组件在任何时间点的数据，并不仅仅是在开始时。 然而，props 是 不可变的（一个计算机科学术语，意思是“不可改变”）。当一个组件需要改变它的 props（例如，响应用户交互或新数据）时，它不得不“请求”它的父组件传递 不同的 props —— 一个新对象！它的旧 props 将被丢弃，最终 JavaScript 引擎将回收它们占用的内存。不要尝试“更改 props”。","tags":[]},{"title":"http vs websocket","date":"2023-08-27T13:22:45.000Z","path":"2023/08/27/ websocket/","text":"通信串行通信中，数据通常是在俩个终端之间进行传送，根据数据流的传输方向分为以下三种基本传送方式：单工、半双工和全双工。 基本区别为： 单工：单工通信只有一根数据线，通信只在一个方向上进行，这种方式的应用实例有：监视器、打印机、电视机等。 半双工：半双工通信也只有一根数据线，它也单工的区别是这根数据线既可作发送又可作发接收，虽然数据可在两个方向上传送，但通信双方不能同时收发数据。http协议采用的就是这个通信方式 全双工： 数据的发送和接收用两根不同的数据线，通信双方在同一时刻都能进行发送和接收，这一工作方式称为全双工通信。在这种方式下，通信双方都有发送器和接收器，发送和接收可同时进行，没有时间延迟。websocket采用的就是这个通信方式 http http协议主要关注的是 客户端——&gt;服务器（获取资源） 特点：无状态协议； 每个请求都是独立的； 请求应答模式，服务器无法主动给客户端推送消息（单工，半双工，全双工） http受浏览器同源策略的影响 websocket双向通信（全双工协议）每次不需要重新建立连接，可以一直相互通信 不使用websocket 以前的双向通信的实现方式Comet，主要是为了是实现服务端可以像客户端桶送数据，为了继绝实时性比较高的情况。 1.轮询（客户端定期向服务端发送请求采用方式，前端setInterval定时器发送请求）轮询会在的问题： 轮询方式会存在竞速问题，无法保证请求的先后顺序，可能会存在多个请求返回的结果同时修改资源。 频繁的网络请求 会导致服务器负荷增加 同时频繁的客户端发请求也会影响客户端性能问题 http 发送的时候 会增加http报文（headers、鉴权、内容类型） 会出现额外的数据消耗 实时性比较低 定时轮询前端定时轮询（定时器发请求）无法处理即时处理的请求轮询的优点 容易实现 不适合实时性比较高的，低并发 2.长轮询（前端接口递归调用） 想解决短轮询的缺点（想将实时性更强）长轮询存在的问题 实时性强了，同时也造成了更多的网络请求 链接堆积问题，链接需要在服务端中保持打开，占有服务器资源（前端需要大量数据从服务端访问，会一直从服务端获取）优点 实时性强了，但是要求服务端的并发能力要强 3.iframe流（使用ifream存在的沙箱模式）存在的问题 单通信（服务端直接推送客户端消息）优点 具有实时性，且不需要客户端和服务端频繁发请求 4.sse EventSource（html提供的，单项通信，客户端可以监控服务端推送的事件。只能推送文本消息，适合小数据）123456789101112131415161718192021222324// 服务端代码 app.get('/clock',function(res,req){ // 这里表明服务器传递的是时间流 res.setHeader('Content-Type','text/event-stream'); setInterval(()=&gt;{ // 和http协议一样，按照行的方式传输 // Content-Type:xxx // Authorization:xxx res.write(`data:hello\\n\\n`) },1000) }) // 客户端代码 script中const eventsource = new EventSource('xxx接口地址')eventsource.onopen = function(){ console.log('Connection opened');}// 发送消息eventsource.onmessage = function(e){ console.log(e.data)}存在的问题- 单项传输，客户端无法给服务端传递数据 5.webSocket（h5提供的api）优点 双向通信 持久连接 发送的消息增加帧是非常小的 支持多种数据格式 天生支持跨域 1234567891011121314151617181920212223242526272829303132333435// 客户端代码const ws = new Websocket('ws://loacalhost:3000')ws.onopen = function(){ console.log('Content opened') ws.send('hello Serve')}ws.onmessage = function(e){ console.log('服务器响应数据：'+ e.data)}// 服务端代码import express from 'express'import http from 'http'// webSocket首先基于http协议import { WebSocket } from 'ws'const wsServer = new WebSocket({ server })wsServer.on('connection',(ws)=&gt;{ console.log('Connection opend') // 给客户端发送消息 ws.send('hellow client') ws.on('message',(message)=&gt;{ console.log('客户端发送的数据：' + message) })})server.listen(3000) 拓展: 协议的表示方式？ 以http为例子就是要了解http各种header的使用怎么实现握手的，数据长什么样子，怎么通信 查看网络得知：webSocket协议 请求行显示：请求方式 GET ws://localhost:3000 协议版本 HTTP/1.1 Connection : Upgrade Upgrade: websocket 升级的协议是什么 Sec-Websocket-Version: 13 协议的版本 生成Sec-Websocket-Key:用于生成唯一的，保证安全的websocket连接 防止恶意连接 可以用于握手 Sec-Websocket-Accept 是根据key算出来的 表示握手成功 通过wireshark工具可以抓包，了解会生成key-&gt;·GBUN9IA5TYXPYgQehlxEUw== 握手的时候创建一个随机的keyaccept-&gt; TpUkC2LowejLbA6ZRgwSL8Rk4FI= 服务端要响应一个值 每一次的key都不一样，采用以下方法创建安全的握手连接 1234567// 加密库import crypto from 'crypto'const number = '258EAFA5-E914-47DA-95CA-C5ABODC85B11const'; const websocketKey ='GBIN9IA5TYXPYgQehlxEUw=='// 采用hah算法生成更新生成摘要输出base64格式 响应给客户端const websocketAccept = crypto.createHash( 'sha1' ).update(websocketKey + number).digest( 'base64' ) 完整的握手过程 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748// 服务端代码import net from 'net'// 可以接受原始的消息// 每个人连接都会产生一个socketconst server = net.createServer(function(socket){ // 客户端发消息 先握手 socket.once('data',function(data){ // 发送的报文 data /** * data包含 GET / HTIP/1.1 *请求行* Host: localhost:3000 Connection: UpgradePragma: no-cacheCache Control: no-cacheUser-Agent: Mozilla/5.0 (Macintosh; Intel Mac 0S X 10 15 7) AppleWebKit/537.36 (KHTMLlike Gecko) Chrome/115.0.0.0 Safari/537.36Upgrade: websocket 0rigin: http://127.0.0.1:5500 Sec WebSocket-Version: 13 Accept-Encoding: gzip,deflate,brAccept-Language: zh-CN, zh;g=0.9Sec-WebSocket-Key: LFD4X3DrVLhObMnKL0b5K0 Sec-WebSocket-Extensions: permessage-deflate; client max window bits */ data = data.toString() // 说明要升级成websocket协议 再报文中读取是否已经是websocket协议 if(data.match(/Upgrade:websocket/)){ /** * 在抓包工具中读取到 key用来解析 ***在报文中都是字符串存在的*** Host; localhost:3000\\r\\n Connection: Upgrade rn Pragma: no-cache rin Cache Control: nocache\\rin User-Agent; Mozilla/5.0 (Macintosh; Intel Mac 05 X 10 15 7) AppleWebkit/537,36 (KHTML, like Gecko Upgrade: websocket r\\n 0rigin: http://127.0.0.1:5500\\r\\n Sec-WebSocket-Version: 13r'nAccept-Encoding: gzip, deflate, bririnAccept-Language: zh-CN zh;a=0.9\\r\\n Sec-WebSocket-Key:P2P2F9kEf/wg18RkzXM8eA==\\rin Sec-WebSocket-Extensions: permessage-deflate; client max window bits'rinrin */ let rows = data.split('\\r\\n') console.log(rows) /** * rows 打印得出 GETHTTP/1.1Host: localhost:3000'Connection: Uggrade'Pragma; no-cache'Cache-Control; no-cache'\"User-Agent: Mozilla/5.0 (Macintosh; Intel Mac 0S X 10 15 7) AppleWebKit/537.36 (KHTML，like Gecko) Chrome/115.0.0.0 Safari/537.36''Uparade: websocket' */ } })})server.listen(3000,function(){ console.log('server start port 3000')})","tags":[]},{"title":"webpack、vite的自动导包的\"爱恨情仇\"","date":"2022-10-19T13:21:48.000Z","path":"2022/10/19/ webpack、vite的自动导包的-爱恨情仇/","text":"webpack、vite的自动导包的”爱恨情仇”前言最近在开发Vue3+Vite的统一基座工程，遇到了模块自动导入的不同构建工具的引入方式，特此记录。 在项目中，为了避免频繁导入。大家都会在对应，例如项目使用Webpack 打包工具的。在其项目store文件下其中的index.js 文件中使用webpack提供的apirequire.context的方法实现自动导入。 ES 模块规范在实现自动导入模块前，我们先了解下ES 模块规范。 所谓的ES模块规范,即 JavaScript 的标准模块系统，它允许您使用 import 和 export 关键字来导入和导出模块。这是现代 JavaScript 中推荐使用的模块化方式。 在ES模块规范中，提供了import.meta.glob功能。它允许在项目运行中动态匹配特定模式的模块。例如以下代码就可以动态匹配到module模块下的所有js文件。 1import.meta.glob('./module/*.js') 话不多说，上干货例如，你的项目sotre文件目录为 12345678- store - module - module1.js - module2.js - ... - moduleN.js - main.js 其中module下的moduleX文件你的main.js为你的sotre入口文件， webpack中的自动导入的实现方式在main.js入口文件中你可以使用webpack提供require.context的方法实现module文件目录下的模块自动导入。 1234567const files = require.context('./model', false, /\\.js$/)const modules = {}files.keys().forEach((key) =&gt; { modules[key.replace(/(\\.\\/|\\.js)/g, '')] = files(key).default})export default modules 其中files.keys()是require.context方法返回的一个函数，它会返回一个包含所有匹配模块路径的数组。 require.context是Webpack提供的一个方法，它允许你在构建时动态地导入模块。该方法接收三个参数： directory: 表示要搜索的目录路径。 useSubdirectories: 表示是否搜索子目录。 regExp: 表示匹配文件的正则表达式。 在上面代码中，files就是通过require.context动态导入了./model目录下所有的.js文件，并使用正则表达式/\\.js$/来匹配文件。这样，files.keys()返回一个包含所有匹配模块路径的数组。例如控制台打印files.keys()可获得以下数组 123456[ \"./module1.js\", \"./module2.js\", \"./。。。.js\", \"./moduleN.js\"] 接着，我们可以使用.forEach()遍历这个数组，对每个匹配的模块进行处理，提取模块名，并将模块添加到modules对象中。这样，你就得到了一个以模块名为键、模块对象为值的modules对象，它包含了所有从./model目录中动态导入的模块。 vite自动导入的实现方式在main.js入口文件中你可以使用ES模块规范提供的import.meta.glob方法来获取特定模块的匹配模式，来实现自动导入。 12345678910111213141516171819// main.jsconst modules = {};async function importAllModules() { const files = import.meta.glob('./module/*.js'); for (const path in files) { const key = path.replace(/\\.\\/module\\/|\\.js/g, ''); const module = await files[path](); modules[key] = module.default; }}importAllModules().then(() =&gt; { console.log(modules); // 所有模块已导入并组合成对象});// 现在可以导出组合后的 modules 对象供其他地方使用export default modules; 在这种情况下，使用异步操作是因为模块导入是一个异步操作。import.meta.glob()方法会返回一个对象，该对象的键是匹配到的文件路径，值是一个函数，调用该函数将异步导入对应的模块。因此，我们需要使用异步操作来等待模块导入完成，然后再将其添加到modules对象中。 如果我们不使用异步操作，而是直接将模块导入的结果添加到module对象中，那么由于模块导入是异步的，modules对象可能在模块导入完成之前被导出，导致modules对象不完整或为空。使用异步操作可以确保在所有模块导入完成后再导出modules对象，保证其包含所有模块导出的内容。 总结为什么都是打包工具，会有不同的自动导入方式呢？在使用 Webpack 的情况下，与使用 Vite 或其他原生支持 ES 模块的项目相比，自动导入模块的实现会有一些区别。主要区别在于 Webpack 不支持 import.meta.glob，因为它是 ES 模块的一个特殊功能，而 Webpack 是一个打包工具，不完全符合 ES 模块的规范。 那这里就浅浅对比下俩种打包工具的差异吧webpack 成熟度高。Webpack是一个成熟且应用相当广泛的打包构建工具，具有强大的生态系统和社区支持。 打包速度较慢。Webpack打包速度在大型项目打包速度比较慢，从入口文件开始，基于代码中的import、export、require构建依赖树，将所有的模块打包到一个或者几个少数文件中。因此，项目规模庞大的话，启动和热更新更慢。每次代码变更构建都需要生成新的Bundle文件。 配置复杂。官网配置很多，需要处理不同的Loader和Plugin来管理不同的资源文件。 插件系统丰富。Webpack具有强大的插件系统，允许开发者根据需求扩展定义。 Tree Shaking。Webpack通过使用UglifyJS等工具进行Tree Shaking，消除未使用的代码 热模块替换（HMR）。Webpack支持热模块替换，但在某些情况下需要手动配置。 Vite 新兴技术。Vite是一个相较新的构建工具，旨在提供更快的开发体验和构建速度。 打包速度极快。Vite在开发环境下具有极快的启动和热更新速度，因为它采用了原生ES模块的方式，并且将依赖项保持为独立的文件，而不是打包到一个大文件中。 配置简单。Vite的配置比Webpack简单，尤其是对于常见的项目结构，大部分任务都无需额外配置。 热模块替换（HMR）。Vite对热模块替换的支持非常好，在开发过程中几乎不需要手动配置即可实现HMR。 Tree Shaking。Vite使用Rollup进行Tree Shaking，这使得未使用的代码更容易被消除。 插件系统还不够完善。Vite的插件系统仍在发展中，目前没有Webpack那么丰富的插件支持。 总之，Webpack更加适合与大型、复杂项目的构建工作，拥有成熟和完善的生态系统和社区。Vite更适合用于一些热更新快速的程序。","tags":[{"name":"前端构建工具","slug":"前端构建工具","permalink":"https://ayozoo.github.io/tags/%E5%89%8D%E7%AB%AF%E6%9E%84%E5%BB%BA%E5%B7%A5%E5%85%B7/"}]},{"title":"vue3+vite环境变量踩雷","date":"2022-07-18T12:12:44.000Z","path":"2022/07/18/ vue3-vite环境变量踩雷/","text":"vue3 + vite 环境变量踩坑前言众所周知，项目搭建过程中，存在环境的区分。一般项目中都会存在env的俩个配置环境变量的配置文件。… 例如以下生产环境、开发环境的环境变量文件： 1234567891011121314//.env.development 生产环境变量文件# 开发环境配置ENV = 'development'# 开发环境VUE_APP_BASE_API = '/dev-api'// .env.production# 生产环境配置ENV = 'production'# 生产环境VUE_APP_BASE_API = '/web-api' 然后在package.json中配置对应环境启动命令用以启动不同环境 1234\"scripts\": { \"dev\": \"vue-cli-service --mode development\", \"build\": \"vue-cli-service build --mode production\", }, 什么是环境变量？根据代码运行环境变化而变化的变量就是所谓的环境变量。 在生产环境和开发环境中最多用以区分接口公共BASE_URL_API路径来请求不同接口。 环境变量一般在全局可以访问得到。在vue项目中，常见的环境变量访问方式是以下方式进行获取的： 12345// webpack.config.jsmodule.exports = { mode: process.env.NODE_ENV === 'production' ? 'production' : 'development'} 其中的process.env.NODE_ENV就是环境变量，他是Node.js提供的API，用以返回获取当前Shall(操作系统和运行环境)所有的环境变量。 vue2+webPack 与 vue3+vite项目搭建获取环境变量的区别：webpack、vite相似之处配置都是按照前言所述，创建对应的环境变量的env文件，配置package.json文件中对应环境的启动命令。 webpack中的环境变量在vue2项目中，webpack做了处理，使得浏览器可以直接识别获取到node环境的process.env变量。 创建方式：配置在项目中env环境变量配置文件中，webpack环境变量可随意命名 获取方式：可以通过***process.env***获取 所以在页面中可以获取相应的环境变量： 123//这里就是获取启动或者打包的命令获取对应的配置文件中的变量 console.log('当前环境是:',process.env.NODE_ENV) vite中的环境变量 创建方式：vite中环境创建存在俩种，都是在项目中env环境变量配置文件中配置： 创建以VITE_开头的环境变量 123456789# 开发环境配置NODE_ENV ='development'# 开发环境VITE_APP_BASE_API = '/dev-api'VITE_APP_URL = \"http://193.1.1.107:8042\"VITE_APP_BASE_PORT = \"80\" 更换VITE_前缀 以 envPrefix 开头的环境变量会通过 import.meta.env 暴露在你的客户端源码中。参考官网： [共享配置]: https://vitejs.cn/vite3-cn/config/shared-options.html#envdir “VIte官方文档” 以 envPrefix 开头的环境变量会通过 import.meta.env 暴露在你的客户端源码中。 类型： string | string[] 默认： VITE_ 安全注意事项 envPrefix 不应被设置为空字符串 ‘ ‘ ，这将暴露你所有的环境变量，导致敏感信息的意外泄漏。 检测到配置为 ‘ ‘ 时 Vite 将会抛出错误. 获取方式： Vite是在 import.meta.env对象上暴露当前Shall的环境变量。 以下是获取对象中常用的内在变量： 1234567891011// 应用运行的模式。import.meta.env.MODE: {string} // 部署应用时的基本 URL。他由base配置项决定。import. meta.env.BASE_URL: {string} // 应用是否运行在生产环境。import. meta.env.PROD: {boolean}// 应用是否运行在开发环境 (永远与 import.meta.env.PROD相反)。import. meta.env.DEV: {boolean} // 应用是否运行在 import.meta.env.SSR: {boolean} server 上。 注意：以上的变量存在于运行环境中，对应的vite.config中获取不到。 在 Vite 的配置文件 vite.config.js 中，默认是不加载 .env 文件中的环境变量的。因为正常情况下，只有在评估完 Vite 配置之后，才知道哪些文件需要被加载，比如之前我们提到的root和envDir都会影响到加载的行为。不管如何，如果想要在配置中加载环境变量，可以使用 loadEnv 去加载环境变量。 1234567891011121314151617181920212223242526272829303132333435363738394041import { defineConfig, loadEnv } from \"vite\";import vue from \"@vitejs/plugin-vue\";import path from \"path\";// https://vitejs.dev/config/export default defineConfig(({ mode }) =&gt; { const env = loadEnv(mode, process.cwd(), \"\"); console.log(env.VITE_APP_BASE_API); const resolve = (dir) =&gt; path.resolve(__dirname, dir); return { base: \"./\", publicPath: resolve(\"./static\"), assetsPublicPath: \"./\", plugins: [vue()], extensions: [\".js\", \".ts\", \".jsx\", \".tsx\", \".json\", \".vue\"], resolve: { alias: { \"@\": resolve(\"src\"), }, }, // 本地运行配置，及反向代理配置 server: { host: \"127.0.0.1\", port: 80, open: false, strictPort: false, https: false, cors: true, proxy: { // 代理规则直接放在 server 对象下，而非嵌套的 server 对象中 [env.VITE_APP_BASE_API]: { target: \"http://172.1.1.210:8080\", changeOrigin: true, rewrite: (path) =&gt; path.replace(new RegExp(\"^\" + env.VITE_APP_BASE_API), \"/web-api\"), // 替换 /dev-api 为 target 接口地址 }, }, }, };}); 注意，mode必须解构后传入loadEnv mode变量中","tags":[{"name":"前端构建工具","slug":"前端构建工具","permalink":"https://ayozoo.github.io/tags/%E5%89%8D%E7%AB%AF%E6%9E%84%E5%BB%BA%E5%B7%A5%E5%85%B7/"}]}]